/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.client.model.FileLocation;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.client.JSON;


/**
 * CiIssueAttributes
 */
@JsonPropertyOrder({
  CiIssueAttributes.JSON_PROPERTY_ISSUE_TYPE,
  CiIssueAttributes.JSON_PROPERTY_MESSAGE,
  CiIssueAttributes.JSON_PROPERTY_FILE_SOURCE,
  CiIssueAttributes.JSON_PROPERTY_CATEGORY
})
@JsonTypeName("CiIssue_attributes")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-26T23:41:20.466109+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
public class CiIssueAttributes {
  /**
   * Gets or Sets issueType
   */
  public enum IssueTypeEnum {
    ANALYZER_WARNING("ANALYZER_WARNING"),
    
    ERROR("ERROR"),
    
    TEST_FAILURE("TEST_FAILURE"),
    
    WARNING("WARNING");

    private String value;

    IssueTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IssueTypeEnum fromValue(String value) {
      for (IssueTypeEnum b : IssueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ISSUE_TYPE = "issueType";
  private IssueTypeEnum issueType;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  public static final String JSON_PROPERTY_FILE_SOURCE = "fileSource";
  private FileLocation fileSource;

  public static final String JSON_PROPERTY_CATEGORY = "category";
  private String category;

  public CiIssueAttributes() { 
  }

  public CiIssueAttributes issueType(IssueTypeEnum issueType) {
    this.issueType = issueType;
    return this;
  }

   /**
   * Get issueType
   * @return issueType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ISSUE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IssueTypeEnum getIssueType() {
    return issueType;
  }


  @JsonProperty(JSON_PROPERTY_ISSUE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIssueType(IssueTypeEnum issueType) {
    this.issueType = issueType;
  }


  public CiIssueAttributes message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessage(String message) {
    this.message = message;
  }


  public CiIssueAttributes fileSource(FileLocation fileSource) {
    this.fileSource = fileSource;
    return this;
  }

   /**
   * Get fileSource
   * @return fileSource
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FileLocation getFileSource() {
    return fileSource;
  }


  @JsonProperty(JSON_PROPERTY_FILE_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileSource(FileLocation fileSource) {
    this.fileSource = fileSource;
  }


  public CiIssueAttributes category(String category) {
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCategory() {
    return category;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategory(String category) {
    this.category = category;
  }


  /**
   * Return true if this CiIssue_attributes object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CiIssueAttributes ciIssueAttributes = (CiIssueAttributes) o;
    return Objects.equals(this.issueType, ciIssueAttributes.issueType) &&
        Objects.equals(this.message, ciIssueAttributes.message) &&
        Objects.equals(this.fileSource, ciIssueAttributes.fileSource) &&
        Objects.equals(this.category, ciIssueAttributes.category);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issueType, message, fileSource, category);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CiIssueAttributes {\n");
    sb.append("    issueType: ").append(toIndentedString(issueType)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    fileSource: ").append(toIndentedString(fileSource)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

