/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CiTestDestinationKind;
import org.openapitools.client.model.CiXcodeVersionAttributesTestDestinationsInnerAvailableRuntimesInner;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.client.JSON;


/**
 * CiXcodeVersionAttributesTestDestinationsInner
 */
@JsonPropertyOrder({
  CiXcodeVersionAttributesTestDestinationsInner.JSON_PROPERTY_DEVICE_TYPE_NAME,
  CiXcodeVersionAttributesTestDestinationsInner.JSON_PROPERTY_DEVICE_TYPE_IDENTIFIER,
  CiXcodeVersionAttributesTestDestinationsInner.JSON_PROPERTY_AVAILABLE_RUNTIMES,
  CiXcodeVersionAttributesTestDestinationsInner.JSON_PROPERTY_KIND
})
@JsonTypeName("CiXcodeVersion_attributes_testDestinations_inner")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-26T23:41:20.466109+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
public class CiXcodeVersionAttributesTestDestinationsInner {
  public static final String JSON_PROPERTY_DEVICE_TYPE_NAME = "deviceTypeName";
  private String deviceTypeName;

  public static final String JSON_PROPERTY_DEVICE_TYPE_IDENTIFIER = "deviceTypeIdentifier";
  private String deviceTypeIdentifier;

  public static final String JSON_PROPERTY_AVAILABLE_RUNTIMES = "availableRuntimes";
  private List<CiXcodeVersionAttributesTestDestinationsInnerAvailableRuntimesInner> availableRuntimes = new ArrayList<>();

  public static final String JSON_PROPERTY_KIND = "kind";
  private CiTestDestinationKind kind;

  public CiXcodeVersionAttributesTestDestinationsInner() { 
  }

  public CiXcodeVersionAttributesTestDestinationsInner deviceTypeName(String deviceTypeName) {
    this.deviceTypeName = deviceTypeName;
    return this;
  }

   /**
   * Get deviceTypeName
   * @return deviceTypeName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEVICE_TYPE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDeviceTypeName() {
    return deviceTypeName;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_TYPE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeviceTypeName(String deviceTypeName) {
    this.deviceTypeName = deviceTypeName;
  }


  public CiXcodeVersionAttributesTestDestinationsInner deviceTypeIdentifier(String deviceTypeIdentifier) {
    this.deviceTypeIdentifier = deviceTypeIdentifier;
    return this;
  }

   /**
   * Get deviceTypeIdentifier
   * @return deviceTypeIdentifier
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEVICE_TYPE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDeviceTypeIdentifier() {
    return deviceTypeIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_TYPE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeviceTypeIdentifier(String deviceTypeIdentifier) {
    this.deviceTypeIdentifier = deviceTypeIdentifier;
  }


  public CiXcodeVersionAttributesTestDestinationsInner availableRuntimes(List<CiXcodeVersionAttributesTestDestinationsInnerAvailableRuntimesInner> availableRuntimes) {
    this.availableRuntimes = availableRuntimes;
    return this;
  }

  public CiXcodeVersionAttributesTestDestinationsInner addAvailableRuntimesItem(CiXcodeVersionAttributesTestDestinationsInnerAvailableRuntimesInner availableRuntimesItem) {
    if (this.availableRuntimes == null) {
      this.availableRuntimes = new ArrayList<>();
    }
    this.availableRuntimes.add(availableRuntimesItem);
    return this;
  }

   /**
   * Get availableRuntimes
   * @return availableRuntimes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVAILABLE_RUNTIMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CiXcodeVersionAttributesTestDestinationsInnerAvailableRuntimesInner> getAvailableRuntimes() {
    return availableRuntimes;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABLE_RUNTIMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailableRuntimes(List<CiXcodeVersionAttributesTestDestinationsInnerAvailableRuntimesInner> availableRuntimes) {
    this.availableRuntimes = availableRuntimes;
  }


  public CiXcodeVersionAttributesTestDestinationsInner kind(CiTestDestinationKind kind) {
    this.kind = kind;
    return this;
  }

   /**
   * Get kind
   * @return kind
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CiTestDestinationKind getKind() {
    return kind;
  }


  @JsonProperty(JSON_PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKind(CiTestDestinationKind kind) {
    this.kind = kind;
  }


  /**
   * Return true if this CiXcodeVersion_attributes_testDestinations_inner object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CiXcodeVersionAttributesTestDestinationsInner ciXcodeVersionAttributesTestDestinationsInner = (CiXcodeVersionAttributesTestDestinationsInner) o;
    return Objects.equals(this.deviceTypeName, ciXcodeVersionAttributesTestDestinationsInner.deviceTypeName) &&
        Objects.equals(this.deviceTypeIdentifier, ciXcodeVersionAttributesTestDestinationsInner.deviceTypeIdentifier) &&
        Objects.equals(this.availableRuntimes, ciXcodeVersionAttributesTestDestinationsInner.availableRuntimes) &&
        Objects.equals(this.kind, ciXcodeVersionAttributesTestDestinationsInner.kind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceTypeName, deviceTypeIdentifier, availableRuntimes, kind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CiXcodeVersionAttributesTestDestinationsInner {\n");
    sb.append("    deviceTypeName: ").append(toIndentedString(deviceTypeName)).append("\n");
    sb.append("    deviceTypeIdentifier: ").append(toIndentedString(deviceTypeIdentifier)).append("\n");
    sb.append("    availableRuntimes: ").append(toIndentedString(availableRuntimes)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

