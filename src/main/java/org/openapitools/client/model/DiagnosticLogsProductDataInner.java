/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DiagnosticLogsProductDataInnerDiagnosticInsightsInner;
import org.openapitools.client.model.DiagnosticLogsProductDataInnerDiagnosticLogsInner;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.client.JSON;


/**
 * DiagnosticLogsProductDataInner
 */
@JsonPropertyOrder({
  DiagnosticLogsProductDataInner.JSON_PROPERTY_SIGNATURE_ID,
  DiagnosticLogsProductDataInner.JSON_PROPERTY_DIAGNOSTIC_INSIGHTS,
  DiagnosticLogsProductDataInner.JSON_PROPERTY_DIAGNOSTIC_LOGS
})
@JsonTypeName("diagnosticLogs_productData_inner")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-26T23:41:20.466109+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
public class DiagnosticLogsProductDataInner {
  public static final String JSON_PROPERTY_SIGNATURE_ID = "signatureId";
  private String signatureId;

  public static final String JSON_PROPERTY_DIAGNOSTIC_INSIGHTS = "diagnosticInsights";
  private List<DiagnosticLogsProductDataInnerDiagnosticInsightsInner> diagnosticInsights = new ArrayList<>();

  public static final String JSON_PROPERTY_DIAGNOSTIC_LOGS = "diagnosticLogs";
  private List<DiagnosticLogsProductDataInnerDiagnosticLogsInner> diagnosticLogs = new ArrayList<>();

  public DiagnosticLogsProductDataInner() { 
  }

  public DiagnosticLogsProductDataInner signatureId(String signatureId) {
    this.signatureId = signatureId;
    return this;
  }

   /**
   * Get signatureId
   * @return signatureId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIGNATURE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSignatureId() {
    return signatureId;
  }


  @JsonProperty(JSON_PROPERTY_SIGNATURE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSignatureId(String signatureId) {
    this.signatureId = signatureId;
  }


  public DiagnosticLogsProductDataInner diagnosticInsights(List<DiagnosticLogsProductDataInnerDiagnosticInsightsInner> diagnosticInsights) {
    this.diagnosticInsights = diagnosticInsights;
    return this;
  }

  public DiagnosticLogsProductDataInner addDiagnosticInsightsItem(DiagnosticLogsProductDataInnerDiagnosticInsightsInner diagnosticInsightsItem) {
    if (this.diagnosticInsights == null) {
      this.diagnosticInsights = new ArrayList<>();
    }
    this.diagnosticInsights.add(diagnosticInsightsItem);
    return this;
  }

   /**
   * Get diagnosticInsights
   * @return diagnosticInsights
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIAGNOSTIC_INSIGHTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DiagnosticLogsProductDataInnerDiagnosticInsightsInner> getDiagnosticInsights() {
    return diagnosticInsights;
  }


  @JsonProperty(JSON_PROPERTY_DIAGNOSTIC_INSIGHTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDiagnosticInsights(List<DiagnosticLogsProductDataInnerDiagnosticInsightsInner> diagnosticInsights) {
    this.diagnosticInsights = diagnosticInsights;
  }


  public DiagnosticLogsProductDataInner diagnosticLogs(List<DiagnosticLogsProductDataInnerDiagnosticLogsInner> diagnosticLogs) {
    this.diagnosticLogs = diagnosticLogs;
    return this;
  }

  public DiagnosticLogsProductDataInner addDiagnosticLogsItem(DiagnosticLogsProductDataInnerDiagnosticLogsInner diagnosticLogsItem) {
    if (this.diagnosticLogs == null) {
      this.diagnosticLogs = new ArrayList<>();
    }
    this.diagnosticLogs.add(diagnosticLogsItem);
    return this;
  }

   /**
   * Get diagnosticLogs
   * @return diagnosticLogs
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIAGNOSTIC_LOGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DiagnosticLogsProductDataInnerDiagnosticLogsInner> getDiagnosticLogs() {
    return diagnosticLogs;
  }


  @JsonProperty(JSON_PROPERTY_DIAGNOSTIC_LOGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDiagnosticLogs(List<DiagnosticLogsProductDataInnerDiagnosticLogsInner> diagnosticLogs) {
    this.diagnosticLogs = diagnosticLogs;
  }


  /**
   * Return true if this diagnosticLogs_productData_inner object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiagnosticLogsProductDataInner diagnosticLogsProductDataInner = (DiagnosticLogsProductDataInner) o;
    return Objects.equals(this.signatureId, diagnosticLogsProductDataInner.signatureId) &&
        Objects.equals(this.diagnosticInsights, diagnosticLogsProductDataInner.diagnosticInsights) &&
        Objects.equals(this.diagnosticLogs, diagnosticLogsProductDataInner.diagnosticLogs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signatureId, diagnosticInsights, diagnosticLogs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiagnosticLogsProductDataInner {\n");
    sb.append("    signatureId: ").append(toIndentedString(signatureId)).append("\n");
    sb.append("    diagnosticInsights: ").append(toIndentedString(diagnosticInsights)).append("\n");
    sb.append("    diagnosticLogs: ").append(toIndentedString(diagnosticLogs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

