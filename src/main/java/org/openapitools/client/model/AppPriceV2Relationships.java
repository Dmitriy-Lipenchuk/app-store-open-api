/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.client.model.AppPricePointV3RelationshipsTerritory;
import org.openapitools.client.model.AppPriceV2RelationshipsAppPricePoint;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.client.JSON;


/**
 * AppPriceV2Relationships
 */
@JsonPropertyOrder({
  AppPriceV2Relationships.JSON_PROPERTY_APP_PRICE_POINT,
  AppPriceV2Relationships.JSON_PROPERTY_TERRITORY
})
@JsonTypeName("AppPriceV2_relationships")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-26T23:41:20.466109+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
public class AppPriceV2Relationships {
  public static final String JSON_PROPERTY_APP_PRICE_POINT = "appPricePoint";
  private AppPriceV2RelationshipsAppPricePoint appPricePoint;

  public static final String JSON_PROPERTY_TERRITORY = "territory";
  private AppPricePointV3RelationshipsTerritory territory;

  public AppPriceV2Relationships() { 
  }

  public AppPriceV2Relationships appPricePoint(AppPriceV2RelationshipsAppPricePoint appPricePoint) {
    this.appPricePoint = appPricePoint;
    return this;
  }

   /**
   * Get appPricePoint
   * @return appPricePoint
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APP_PRICE_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AppPriceV2RelationshipsAppPricePoint getAppPricePoint() {
    return appPricePoint;
  }


  @JsonProperty(JSON_PROPERTY_APP_PRICE_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAppPricePoint(AppPriceV2RelationshipsAppPricePoint appPricePoint) {
    this.appPricePoint = appPricePoint;
  }


  public AppPriceV2Relationships territory(AppPricePointV3RelationshipsTerritory territory) {
    this.territory = territory;
    return this;
  }

   /**
   * Get territory
   * @return territory
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERRITORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AppPricePointV3RelationshipsTerritory getTerritory() {
    return territory;
  }


  @JsonProperty(JSON_PROPERTY_TERRITORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerritory(AppPricePointV3RelationshipsTerritory territory) {
    this.territory = territory;
  }


  /**
   * Return true if this AppPriceV2_relationships object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppPriceV2Relationships appPriceV2Relationships = (AppPriceV2Relationships) o;
    return Objects.equals(this.appPricePoint, appPriceV2Relationships.appPricePoint) &&
        Objects.equals(this.territory, appPriceV2Relationships.territory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appPricePoint, territory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppPriceV2Relationships {\n");
    sb.append("    appPricePoint: ").append(toIndentedString(appPricePoint)).append("\n");
    sb.append("    territory: ").append(toIndentedString(territory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

