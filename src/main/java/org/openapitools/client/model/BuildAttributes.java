/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.BuildAudienceType;
import org.openapitools.client.model.ImageAsset;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.client.JSON;


/**
 * BuildAttributes
 */
@JsonPropertyOrder({
  BuildAttributes.JSON_PROPERTY_VERSION,
  BuildAttributes.JSON_PROPERTY_UPLOADED_DATE,
  BuildAttributes.JSON_PROPERTY_EXPIRATION_DATE,
  BuildAttributes.JSON_PROPERTY_EXPIRED,
  BuildAttributes.JSON_PROPERTY_MIN_OS_VERSION,
  BuildAttributes.JSON_PROPERTY_LS_MINIMUM_SYSTEM_VERSION,
  BuildAttributes.JSON_PROPERTY_COMPUTED_MIN_MAC_OS_VERSION,
  BuildAttributes.JSON_PROPERTY_ICON_ASSET_TOKEN,
  BuildAttributes.JSON_PROPERTY_PROCESSING_STATE,
  BuildAttributes.JSON_PROPERTY_BUILD_AUDIENCE_TYPE,
  BuildAttributes.JSON_PROPERTY_USES_NON_EXEMPT_ENCRYPTION
})
@JsonTypeName("Build_attributes")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-26T23:41:20.466109+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
public class BuildAttributes {
  public static final String JSON_PROPERTY_VERSION = "version";
  private String version;

  public static final String JSON_PROPERTY_UPLOADED_DATE = "uploadedDate";
  private OffsetDateTime uploadedDate;

  public static final String JSON_PROPERTY_EXPIRATION_DATE = "expirationDate";
  private OffsetDateTime expirationDate;

  public static final String JSON_PROPERTY_EXPIRED = "expired";
  private Boolean expired;

  public static final String JSON_PROPERTY_MIN_OS_VERSION = "minOsVersion";
  private String minOsVersion;

  public static final String JSON_PROPERTY_LS_MINIMUM_SYSTEM_VERSION = "lsMinimumSystemVersion";
  private String lsMinimumSystemVersion;

  public static final String JSON_PROPERTY_COMPUTED_MIN_MAC_OS_VERSION = "computedMinMacOsVersion";
  private String computedMinMacOsVersion;

  public static final String JSON_PROPERTY_ICON_ASSET_TOKEN = "iconAssetToken";
  private ImageAsset iconAssetToken;

  /**
   * Gets or Sets processingState
   */
  public enum ProcessingStateEnum {
    PROCESSING("PROCESSING"),
    
    FAILED("FAILED"),
    
    INVALID("INVALID"),
    
    VALID("VALID");

    private String value;

    ProcessingStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProcessingStateEnum fromValue(String value) {
      for (ProcessingStateEnum b : ProcessingStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PROCESSING_STATE = "processingState";
  private ProcessingStateEnum processingState;

  public static final String JSON_PROPERTY_BUILD_AUDIENCE_TYPE = "buildAudienceType";
  private BuildAudienceType buildAudienceType;

  public static final String JSON_PROPERTY_USES_NON_EXEMPT_ENCRYPTION = "usesNonExemptEncryption";
  private Boolean usesNonExemptEncryption;

  public BuildAttributes() { 
  }

  public BuildAttributes version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(String version) {
    this.version = version;
  }


  public BuildAttributes uploadedDate(OffsetDateTime uploadedDate) {
    this.uploadedDate = uploadedDate;
    return this;
  }

   /**
   * Get uploadedDate
   * @return uploadedDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPLOADED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getUploadedDate() {
    return uploadedDate;
  }


  @JsonProperty(JSON_PROPERTY_UPLOADED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUploadedDate(OffsetDateTime uploadedDate) {
    this.uploadedDate = uploadedDate;
  }


  public BuildAttributes expirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * Get expirationDate
   * @return expirationDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public BuildAttributes expired(Boolean expired) {
    this.expired = expired;
    return this;
  }

   /**
   * Get expired
   * @return expired
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getExpired() {
    return expired;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpired(Boolean expired) {
    this.expired = expired;
  }


  public BuildAttributes minOsVersion(String minOsVersion) {
    this.minOsVersion = minOsVersion;
    return this;
  }

   /**
   * Get minOsVersion
   * @return minOsVersion
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN_OS_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMinOsVersion() {
    return minOsVersion;
  }


  @JsonProperty(JSON_PROPERTY_MIN_OS_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinOsVersion(String minOsVersion) {
    this.minOsVersion = minOsVersion;
  }


  public BuildAttributes lsMinimumSystemVersion(String lsMinimumSystemVersion) {
    this.lsMinimumSystemVersion = lsMinimumSystemVersion;
    return this;
  }

   /**
   * Get lsMinimumSystemVersion
   * @return lsMinimumSystemVersion
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LS_MINIMUM_SYSTEM_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLsMinimumSystemVersion() {
    return lsMinimumSystemVersion;
  }


  @JsonProperty(JSON_PROPERTY_LS_MINIMUM_SYSTEM_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLsMinimumSystemVersion(String lsMinimumSystemVersion) {
    this.lsMinimumSystemVersion = lsMinimumSystemVersion;
  }


  public BuildAttributes computedMinMacOsVersion(String computedMinMacOsVersion) {
    this.computedMinMacOsVersion = computedMinMacOsVersion;
    return this;
  }

   /**
   * Get computedMinMacOsVersion
   * @return computedMinMacOsVersion
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPUTED_MIN_MAC_OS_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getComputedMinMacOsVersion() {
    return computedMinMacOsVersion;
  }


  @JsonProperty(JSON_PROPERTY_COMPUTED_MIN_MAC_OS_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComputedMinMacOsVersion(String computedMinMacOsVersion) {
    this.computedMinMacOsVersion = computedMinMacOsVersion;
  }


  public BuildAttributes iconAssetToken(ImageAsset iconAssetToken) {
    this.iconAssetToken = iconAssetToken;
    return this;
  }

   /**
   * Get iconAssetToken
   * @return iconAssetToken
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ICON_ASSET_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImageAsset getIconAssetToken() {
    return iconAssetToken;
  }


  @JsonProperty(JSON_PROPERTY_ICON_ASSET_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIconAssetToken(ImageAsset iconAssetToken) {
    this.iconAssetToken = iconAssetToken;
  }


  public BuildAttributes processingState(ProcessingStateEnum processingState) {
    this.processingState = processingState;
    return this;
  }

   /**
   * Get processingState
   * @return processingState
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESSING_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ProcessingStateEnum getProcessingState() {
    return processingState;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSING_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessingState(ProcessingStateEnum processingState) {
    this.processingState = processingState;
  }


  public BuildAttributes buildAudienceType(BuildAudienceType buildAudienceType) {
    this.buildAudienceType = buildAudienceType;
    return this;
  }

   /**
   * Get buildAudienceType
   * @return buildAudienceType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUILD_AUDIENCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BuildAudienceType getBuildAudienceType() {
    return buildAudienceType;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_AUDIENCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildAudienceType(BuildAudienceType buildAudienceType) {
    this.buildAudienceType = buildAudienceType;
  }


  public BuildAttributes usesNonExemptEncryption(Boolean usesNonExemptEncryption) {
    this.usesNonExemptEncryption = usesNonExemptEncryption;
    return this;
  }

   /**
   * Get usesNonExemptEncryption
   * @return usesNonExemptEncryption
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USES_NON_EXEMPT_ENCRYPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUsesNonExemptEncryption() {
    return usesNonExemptEncryption;
  }


  @JsonProperty(JSON_PROPERTY_USES_NON_EXEMPT_ENCRYPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsesNonExemptEncryption(Boolean usesNonExemptEncryption) {
    this.usesNonExemptEncryption = usesNonExemptEncryption;
  }


  /**
   * Return true if this Build_attributes object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildAttributes buildAttributes = (BuildAttributes) o;
    return Objects.equals(this.version, buildAttributes.version) &&
        Objects.equals(this.uploadedDate, buildAttributes.uploadedDate) &&
        Objects.equals(this.expirationDate, buildAttributes.expirationDate) &&
        Objects.equals(this.expired, buildAttributes.expired) &&
        Objects.equals(this.minOsVersion, buildAttributes.minOsVersion) &&
        Objects.equals(this.lsMinimumSystemVersion, buildAttributes.lsMinimumSystemVersion) &&
        Objects.equals(this.computedMinMacOsVersion, buildAttributes.computedMinMacOsVersion) &&
        Objects.equals(this.iconAssetToken, buildAttributes.iconAssetToken) &&
        Objects.equals(this.processingState, buildAttributes.processingState) &&
        Objects.equals(this.buildAudienceType, buildAttributes.buildAudienceType) &&
        Objects.equals(this.usesNonExemptEncryption, buildAttributes.usesNonExemptEncryption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, uploadedDate, expirationDate, expired, minOsVersion, lsMinimumSystemVersion, computedMinMacOsVersion, iconAssetToken, processingState, buildAudienceType, usesNonExemptEncryption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildAttributes {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    uploadedDate: ").append(toIndentedString(uploadedDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    minOsVersion: ").append(toIndentedString(minOsVersion)).append("\n");
    sb.append("    lsMinimumSystemVersion: ").append(toIndentedString(lsMinimumSystemVersion)).append("\n");
    sb.append("    computedMinMacOsVersion: ").append(toIndentedString(computedMinMacOsVersion)).append("\n");
    sb.append("    iconAssetToken: ").append(toIndentedString(iconAssetToken)).append("\n");
    sb.append("    processingState: ").append(toIndentedString(processingState)).append("\n");
    sb.append("    buildAudienceType: ").append(toIndentedString(buildAudienceType)).append("\n");
    sb.append("    usesNonExemptEncryption: ").append(toIndentedString(usesNonExemptEncryption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

