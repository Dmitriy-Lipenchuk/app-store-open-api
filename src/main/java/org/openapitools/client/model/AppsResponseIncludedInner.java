/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.client.model.AppClip;
import org.openapitools.client.model.AppCustomProductPage;
import org.openapitools.client.model.AppEncryptionDeclaration;
import org.openapitools.client.model.AppEvent;
import org.openapitools.client.model.AppInfo;
import org.openapitools.client.model.AppPreOrder;
import org.openapitools.client.model.AppStoreVersion;
import org.openapitools.client.model.AppStoreVersionExperimentV2;
import org.openapitools.client.model.AppStoreVersionExperimentV2Attributes;
import org.openapitools.client.model.AppStoreVersionExperimentV2Relationships;
import org.openapitools.client.model.BetaAppLocalization;
import org.openapitools.client.model.BetaAppReviewDetail;
import org.openapitools.client.model.BetaGroup;
import org.openapitools.client.model.BetaLicenseAgreement;
import org.openapitools.client.model.Build;
import org.openapitools.client.model.CiProduct;
import org.openapitools.client.model.EndUserLicenseAgreement;
import org.openapitools.client.model.GameCenterDetail;
import org.openapitools.client.model.GameCenterEnabledVersion;
import org.openapitools.client.model.InAppPurchase;
import org.openapitools.client.model.InAppPurchaseV2;
import org.openapitools.client.model.PrereleaseVersion;
import org.openapitools.client.model.PromotedPurchase;
import org.openapitools.client.model.ResourceLinks;
import org.openapitools.client.model.ReviewSubmission;
import org.openapitools.client.model.SubscriptionGracePeriod;
import org.openapitools.client.model.SubscriptionGroup;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.client.JSON;

import com.fasterxml.jackson.core.type.TypeReference;

import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.openapitools.client.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-26T23:41:20.466109+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
@JsonDeserialize(using = AppsResponseIncludedInner.AppsResponseIncludedInnerDeserializer.class)
@JsonSerialize(using = AppsResponseIncludedInner.AppsResponseIncludedInnerSerializer.class)
public class AppsResponseIncludedInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AppsResponseIncludedInner.class.getName());

    public static class AppsResponseIncludedInnerSerializer extends StdSerializer<AppsResponseIncludedInner> {
        public AppsResponseIncludedInnerSerializer(Class<AppsResponseIncludedInner> t) {
            super(t);
        }

        public AppsResponseIncludedInnerSerializer() {
            this(null);
        }

        @Override
        public void serialize(AppsResponseIncludedInner value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class AppsResponseIncludedInnerDeserializer extends StdDeserializer<AppsResponseIncludedInner> {
        public AppsResponseIncludedInnerDeserializer() {
            this(AppsResponseIncludedInner.class);
        }

        public AppsResponseIncludedInnerDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public AppsResponseIncludedInner deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize AppEncryptionDeclaration
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AppEncryptionDeclaration.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AppEncryptionDeclaration'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AppEncryptionDeclaration'", e);
            }

            // deserialize CiProduct
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(CiProduct.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'CiProduct'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'CiProduct'", e);
            }

            // deserialize BetaGroup
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BetaGroup.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BetaGroup'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BetaGroup'", e);
            }

            // deserialize AppStoreVersion
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AppStoreVersion.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AppStoreVersion'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AppStoreVersion'", e);
            }

            // deserialize PrereleaseVersion
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PrereleaseVersion.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PrereleaseVersion'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PrereleaseVersion'", e);
            }

            // deserialize BetaAppLocalization
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BetaAppLocalization.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BetaAppLocalization'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BetaAppLocalization'", e);
            }

            // deserialize Build
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(Build.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'Build'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'Build'", e);
            }

            // deserialize BetaLicenseAgreement
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BetaLicenseAgreement.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BetaLicenseAgreement'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BetaLicenseAgreement'", e);
            }

            // deserialize BetaAppReviewDetail
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BetaAppReviewDetail.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BetaAppReviewDetail'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BetaAppReviewDetail'", e);
            }

            // deserialize AppInfo
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AppInfo.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AppInfo'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AppInfo'", e);
            }

            // deserialize AppClip
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AppClip.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AppClip'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AppClip'", e);
            }

            // deserialize EndUserLicenseAgreement
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(EndUserLicenseAgreement.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'EndUserLicenseAgreement'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'EndUserLicenseAgreement'", e);
            }

            // deserialize AppPreOrder
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AppPreOrder.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AppPreOrder'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AppPreOrder'", e);
            }

            // deserialize InAppPurchase
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(InAppPurchase.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'InAppPurchase'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'InAppPurchase'", e);
            }

            // deserialize SubscriptionGroup
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(SubscriptionGroup.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'SubscriptionGroup'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'SubscriptionGroup'", e);
            }

            // deserialize GameCenterEnabledVersion
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(GameCenterEnabledVersion.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'GameCenterEnabledVersion'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'GameCenterEnabledVersion'", e);
            }

            // deserialize AppCustomProductPage
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AppCustomProductPage.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AppCustomProductPage'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AppCustomProductPage'", e);
            }

            // deserialize InAppPurchaseV2
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(InAppPurchaseV2.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'InAppPurchaseV2'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'InAppPurchaseV2'", e);
            }

            // deserialize PromotedPurchase
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PromotedPurchase.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PromotedPurchase'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PromotedPurchase'", e);
            }

            // deserialize AppEvent
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AppEvent.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AppEvent'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AppEvent'", e);
            }

            // deserialize ReviewSubmission
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ReviewSubmission.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ReviewSubmission'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ReviewSubmission'", e);
            }

            // deserialize SubscriptionGracePeriod
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(SubscriptionGracePeriod.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'SubscriptionGracePeriod'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'SubscriptionGracePeriod'", e);
            }

            // deserialize GameCenterDetail
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(GameCenterDetail.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'GameCenterDetail'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'GameCenterDetail'", e);
            }

            // deserialize AppStoreVersionExperimentV2
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AppStoreVersionExperimentV2.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AppStoreVersionExperimentV2'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AppStoreVersionExperimentV2'", e);
            }

            if (match == 1) {
                AppsResponseIncludedInner ret = new AppsResponseIncludedInner();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for AppsResponseIncludedInner: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public AppsResponseIncludedInner getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "AppsResponseIncludedInner cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<>();

    public AppsResponseIncludedInner() {
        super("oneOf", Boolean.FALSE);
    }

    public AppsResponseIncludedInner(AppEncryptionDeclaration o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(CiProduct o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(BetaGroup o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(AppStoreVersion o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(PrereleaseVersion o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(BetaAppLocalization o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(Build o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(BetaLicenseAgreement o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(BetaAppReviewDetail o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(AppInfo o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(AppClip o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(EndUserLicenseAgreement o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(AppPreOrder o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(InAppPurchase o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(SubscriptionGroup o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(GameCenterEnabledVersion o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(AppCustomProductPage o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(InAppPurchaseV2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(PromotedPurchase o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(AppEvent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(ReviewSubmission o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(SubscriptionGracePeriod o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(GameCenterDetail o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppsResponseIncludedInner(AppStoreVersionExperimentV2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AppClip", new GenericType<AppClip>() {
        });
        schemas.put("AppCustomProductPage", new GenericType<AppCustomProductPage>() {
        });
        schemas.put("AppEncryptionDeclaration", new GenericType<AppEncryptionDeclaration>() {
        });
        schemas.put("AppEvent", new GenericType<AppEvent>() {
        });
        schemas.put("AppInfo", new GenericType<AppInfo>() {
        });
        schemas.put("AppPreOrder", new GenericType<AppPreOrder>() {
        });
        schemas.put("AppStoreVersion", new GenericType<AppStoreVersion>() {
        });
        schemas.put("AppStoreVersionExperimentV2", new GenericType<AppStoreVersionExperimentV2>() {
        });
        schemas.put("BetaAppLocalization", new GenericType<BetaAppLocalization>() {
        });
        schemas.put("BetaAppReviewDetail", new GenericType<BetaAppReviewDetail>() {
        });
        schemas.put("BetaGroup", new GenericType<BetaGroup>() {
        });
        schemas.put("BetaLicenseAgreement", new GenericType<BetaLicenseAgreement>() {
        });
        schemas.put("Build", new GenericType<Build>() {
        });
        schemas.put("CiProduct", new GenericType<CiProduct>() {
        });
        schemas.put("EndUserLicenseAgreement", new GenericType<EndUserLicenseAgreement>() {
        });
        schemas.put("GameCenterDetail", new GenericType<GameCenterDetail>() {
        });
        schemas.put("GameCenterEnabledVersion", new GenericType<GameCenterEnabledVersion>() {
        });
        schemas.put("InAppPurchase", new GenericType<InAppPurchase>() {
        });
        schemas.put("InAppPurchaseV2", new GenericType<InAppPurchaseV2>() {
        });
        schemas.put("PrereleaseVersion", new GenericType<PrereleaseVersion>() {
        });
        schemas.put("PromotedPurchase", new GenericType<PromotedPurchase>() {
        });
        schemas.put("ReviewSubmission", new GenericType<ReviewSubmission>() {
        });
        schemas.put("SubscriptionGracePeriod", new GenericType<SubscriptionGracePeriod>() {
        });
        schemas.put("SubscriptionGroup", new GenericType<SubscriptionGroup>() {
        });
        JSON.registerDescendants(AppsResponseIncludedInner.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return AppsResponseIncludedInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AppClip, AppCustomProductPage, AppEncryptionDeclaration, AppEvent, AppInfo, AppPreOrder, AppStoreVersion, AppStoreVersionExperimentV2, BetaAppLocalization, BetaAppReviewDetail, BetaGroup, BetaLicenseAgreement, Build, CiProduct, EndUserLicenseAgreement, GameCenterDetail, GameCenterEnabledVersion, InAppPurchase, InAppPurchaseV2, PrereleaseVersion, PromotedPurchase, ReviewSubmission, SubscriptionGracePeriod, SubscriptionGroup
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(AppEncryptionDeclaration.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(CiProduct.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BetaGroup.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AppStoreVersion.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PrereleaseVersion.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BetaAppLocalization.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(Build.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BetaLicenseAgreement.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BetaAppReviewDetail.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AppInfo.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AppClip.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(EndUserLicenseAgreement.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AppPreOrder.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(InAppPurchase.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(SubscriptionGroup.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(GameCenterEnabledVersion.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AppCustomProductPage.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(InAppPurchaseV2.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PromotedPurchase.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AppEvent.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ReviewSubmission.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(SubscriptionGracePeriod.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(GameCenterDetail.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AppStoreVersionExperimentV2.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AppClip, AppCustomProductPage, AppEncryptionDeclaration, AppEvent, AppInfo, AppPreOrder, AppStoreVersion, AppStoreVersionExperimentV2, BetaAppLocalization, BetaAppReviewDetail, BetaGroup, BetaLicenseAgreement, Build, CiProduct, EndUserLicenseAgreement, GameCenterDetail, GameCenterEnabledVersion, InAppPurchase, InAppPurchaseV2, PrereleaseVersion, PromotedPurchase, ReviewSubmission, SubscriptionGracePeriod, SubscriptionGroup");
    }

    /**
     * Get the actual instance, which can be the following:
     * AppClip, AppCustomProductPage, AppEncryptionDeclaration, AppEvent, AppInfo, AppPreOrder, AppStoreVersion, AppStoreVersionExperimentV2, BetaAppLocalization, BetaAppReviewDetail, BetaGroup, BetaLicenseAgreement, Build, CiProduct, EndUserLicenseAgreement, GameCenterDetail, GameCenterEnabledVersion, InAppPurchase, InAppPurchaseV2, PrereleaseVersion, PromotedPurchase, ReviewSubmission, SubscriptionGracePeriod, SubscriptionGroup
     *
     * @return The actual instance (AppClip, AppCustomProductPage, AppEncryptionDeclaration, AppEvent, AppInfo, AppPreOrder, AppStoreVersion, AppStoreVersionExperimentV2, BetaAppLocalization, BetaAppReviewDetail, BetaGroup, BetaLicenseAgreement, Build, CiProduct, EndUserLicenseAgreement, GameCenterDetail, GameCenterEnabledVersion, InAppPurchase, InAppPurchaseV2, PrereleaseVersion, PromotedPurchase, ReviewSubmission, SubscriptionGracePeriod, SubscriptionGroup)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppEncryptionDeclaration`. If the actual instance is not `AppEncryptionDeclaration`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppEncryptionDeclaration`
     * @throws ClassCastException if the instance is not `AppEncryptionDeclaration`
     */
    public AppEncryptionDeclaration getAppEncryptionDeclaration() throws ClassCastException {
        return (AppEncryptionDeclaration)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CiProduct`. If the actual instance is not `CiProduct`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CiProduct`
     * @throws ClassCastException if the instance is not `CiProduct`
     */
    public CiProduct getCiProduct() throws ClassCastException {
        return (CiProduct)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BetaGroup`. If the actual instance is not `BetaGroup`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BetaGroup`
     * @throws ClassCastException if the instance is not `BetaGroup`
     */
    public BetaGroup getBetaGroup() throws ClassCastException {
        return (BetaGroup)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppStoreVersion`. If the actual instance is not `AppStoreVersion`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppStoreVersion`
     * @throws ClassCastException if the instance is not `AppStoreVersion`
     */
    public AppStoreVersion getAppStoreVersion() throws ClassCastException {
        return (AppStoreVersion)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PrereleaseVersion`. If the actual instance is not `PrereleaseVersion`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PrereleaseVersion`
     * @throws ClassCastException if the instance is not `PrereleaseVersion`
     */
    public PrereleaseVersion getPrereleaseVersion() throws ClassCastException {
        return (PrereleaseVersion)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BetaAppLocalization`. If the actual instance is not `BetaAppLocalization`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BetaAppLocalization`
     * @throws ClassCastException if the instance is not `BetaAppLocalization`
     */
    public BetaAppLocalization getBetaAppLocalization() throws ClassCastException {
        return (BetaAppLocalization)super.getActualInstance();
    }

    /**
     * Get the actual instance of `Build`. If the actual instance is not `Build`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Build`
     * @throws ClassCastException if the instance is not `Build`
     */
    public Build getBuild() throws ClassCastException {
        return (Build)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BetaLicenseAgreement`. If the actual instance is not `BetaLicenseAgreement`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BetaLicenseAgreement`
     * @throws ClassCastException if the instance is not `BetaLicenseAgreement`
     */
    public BetaLicenseAgreement getBetaLicenseAgreement() throws ClassCastException {
        return (BetaLicenseAgreement)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BetaAppReviewDetail`. If the actual instance is not `BetaAppReviewDetail`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BetaAppReviewDetail`
     * @throws ClassCastException if the instance is not `BetaAppReviewDetail`
     */
    public BetaAppReviewDetail getBetaAppReviewDetail() throws ClassCastException {
        return (BetaAppReviewDetail)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppInfo`. If the actual instance is not `AppInfo`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppInfo`
     * @throws ClassCastException if the instance is not `AppInfo`
     */
    public AppInfo getAppInfo() throws ClassCastException {
        return (AppInfo)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppClip`. If the actual instance is not `AppClip`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppClip`
     * @throws ClassCastException if the instance is not `AppClip`
     */
    public AppClip getAppClip() throws ClassCastException {
        return (AppClip)super.getActualInstance();
    }

    /**
     * Get the actual instance of `EndUserLicenseAgreement`. If the actual instance is not `EndUserLicenseAgreement`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EndUserLicenseAgreement`
     * @throws ClassCastException if the instance is not `EndUserLicenseAgreement`
     */
    public EndUserLicenseAgreement getEndUserLicenseAgreement() throws ClassCastException {
        return (EndUserLicenseAgreement)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppPreOrder`. If the actual instance is not `AppPreOrder`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppPreOrder`
     * @throws ClassCastException if the instance is not `AppPreOrder`
     */
    public AppPreOrder getAppPreOrder() throws ClassCastException {
        return (AppPreOrder)super.getActualInstance();
    }

    /**
     * Get the actual instance of `InAppPurchase`. If the actual instance is not `InAppPurchase`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InAppPurchase`
     * @throws ClassCastException if the instance is not `InAppPurchase`
     */
    public InAppPurchase getInAppPurchase() throws ClassCastException {
        return (InAppPurchase)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SubscriptionGroup`. If the actual instance is not `SubscriptionGroup`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SubscriptionGroup`
     * @throws ClassCastException if the instance is not `SubscriptionGroup`
     */
    public SubscriptionGroup getSubscriptionGroup() throws ClassCastException {
        return (SubscriptionGroup)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GameCenterEnabledVersion`. If the actual instance is not `GameCenterEnabledVersion`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GameCenterEnabledVersion`
     * @throws ClassCastException if the instance is not `GameCenterEnabledVersion`
     */
    public GameCenterEnabledVersion getGameCenterEnabledVersion() throws ClassCastException {
        return (GameCenterEnabledVersion)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppCustomProductPage`. If the actual instance is not `AppCustomProductPage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppCustomProductPage`
     * @throws ClassCastException if the instance is not `AppCustomProductPage`
     */
    public AppCustomProductPage getAppCustomProductPage() throws ClassCastException {
        return (AppCustomProductPage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `InAppPurchaseV2`. If the actual instance is not `InAppPurchaseV2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InAppPurchaseV2`
     * @throws ClassCastException if the instance is not `InAppPurchaseV2`
     */
    public InAppPurchaseV2 getInAppPurchaseV2() throws ClassCastException {
        return (InAppPurchaseV2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PromotedPurchase`. If the actual instance is not `PromotedPurchase`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PromotedPurchase`
     * @throws ClassCastException if the instance is not `PromotedPurchase`
     */
    public PromotedPurchase getPromotedPurchase() throws ClassCastException {
        return (PromotedPurchase)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppEvent`. If the actual instance is not `AppEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppEvent`
     * @throws ClassCastException if the instance is not `AppEvent`
     */
    public AppEvent getAppEvent() throws ClassCastException {
        return (AppEvent)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ReviewSubmission`. If the actual instance is not `ReviewSubmission`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ReviewSubmission`
     * @throws ClassCastException if the instance is not `ReviewSubmission`
     */
    public ReviewSubmission getReviewSubmission() throws ClassCastException {
        return (ReviewSubmission)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SubscriptionGracePeriod`. If the actual instance is not `SubscriptionGracePeriod`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SubscriptionGracePeriod`
     * @throws ClassCastException if the instance is not `SubscriptionGracePeriod`
     */
    public SubscriptionGracePeriod getSubscriptionGracePeriod() throws ClassCastException {
        return (SubscriptionGracePeriod)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GameCenterDetail`. If the actual instance is not `GameCenterDetail`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GameCenterDetail`
     * @throws ClassCastException if the instance is not `GameCenterDetail`
     */
    public GameCenterDetail getGameCenterDetail() throws ClassCastException {
        return (GameCenterDetail)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppStoreVersionExperimentV2`. If the actual instance is not `AppStoreVersionExperimentV2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppStoreVersionExperimentV2`
     * @throws ClassCastException if the instance is not `AppStoreVersionExperimentV2`
     */
    public AppStoreVersionExperimentV2 getAppStoreVersionExperimentV2() throws ClassCastException {
        return (AppStoreVersionExperimentV2)super.getActualInstance();
    }

}

