/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.net.URI;
import java.util.Arrays;
import org.openapitools.client.model.CiGitUser;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.client.JSON;


/**
 * CiBuildRunAttributesSourceCommit
 */
@JsonPropertyOrder({
  CiBuildRunAttributesSourceCommit.JSON_PROPERTY_COMMIT_SHA,
  CiBuildRunAttributesSourceCommit.JSON_PROPERTY_MESSAGE,
  CiBuildRunAttributesSourceCommit.JSON_PROPERTY_AUTHOR,
  CiBuildRunAttributesSourceCommit.JSON_PROPERTY_COMMITTER,
  CiBuildRunAttributesSourceCommit.JSON_PROPERTY_WEB_URL
})
@JsonTypeName("CiBuildRun_attributes_sourceCommit")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-26T23:41:20.466109+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
public class CiBuildRunAttributesSourceCommit {
  public static final String JSON_PROPERTY_COMMIT_SHA = "commitSha";
  private String commitSha;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  public static final String JSON_PROPERTY_AUTHOR = "author";
  private CiGitUser author;

  public static final String JSON_PROPERTY_COMMITTER = "committer";
  private CiGitUser committer;

  public static final String JSON_PROPERTY_WEB_URL = "webUrl";
  private URI webUrl;

  public CiBuildRunAttributesSourceCommit() { 
  }

  public CiBuildRunAttributesSourceCommit commitSha(String commitSha) {
    this.commitSha = commitSha;
    return this;
  }

   /**
   * Get commitSha
   * @return commitSha
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMIT_SHA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCommitSha() {
    return commitSha;
  }


  @JsonProperty(JSON_PROPERTY_COMMIT_SHA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommitSha(String commitSha) {
    this.commitSha = commitSha;
  }


  public CiBuildRunAttributesSourceCommit message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessage(String message) {
    this.message = message;
  }


  public CiBuildRunAttributesSourceCommit author(CiGitUser author) {
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CiGitUser getAuthor() {
    return author;
  }


  @JsonProperty(JSON_PROPERTY_AUTHOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthor(CiGitUser author) {
    this.author = author;
  }


  public CiBuildRunAttributesSourceCommit committer(CiGitUser committer) {
    this.committer = committer;
    return this;
  }

   /**
   * Get committer
   * @return committer
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMITTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CiGitUser getCommitter() {
    return committer;
  }


  @JsonProperty(JSON_PROPERTY_COMMITTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommitter(CiGitUser committer) {
    this.committer = committer;
  }


  public CiBuildRunAttributesSourceCommit webUrl(URI webUrl) {
    this.webUrl = webUrl;
    return this;
  }

   /**
   * Get webUrl
   * @return webUrl
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEB_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getWebUrl() {
    return webUrl;
  }


  @JsonProperty(JSON_PROPERTY_WEB_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebUrl(URI webUrl) {
    this.webUrl = webUrl;
  }


  /**
   * Return true if this CiBuildRun_attributes_sourceCommit object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CiBuildRunAttributesSourceCommit ciBuildRunAttributesSourceCommit = (CiBuildRunAttributesSourceCommit) o;
    return Objects.equals(this.commitSha, ciBuildRunAttributesSourceCommit.commitSha) &&
        Objects.equals(this.message, ciBuildRunAttributesSourceCommit.message) &&
        Objects.equals(this.author, ciBuildRunAttributesSourceCommit.author) &&
        Objects.equals(this.committer, ciBuildRunAttributesSourceCommit.committer) &&
        Objects.equals(this.webUrl, ciBuildRunAttributesSourceCommit.webUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitSha, message, author, committer, webUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CiBuildRunAttributesSourceCommit {\n");
    sb.append("    commitSha: ").append(toIndentedString(commitSha)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    committer: ").append(toIndentedString(committer)).append("\n");
    sb.append("    webUrl: ").append(toIndentedString(webUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

