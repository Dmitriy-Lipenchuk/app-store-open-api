/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CapabilityOption;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.client.JSON;


/**
 * CapabilitySetting
 */
@JsonPropertyOrder({
  CapabilitySetting.JSON_PROPERTY_KEY,
  CapabilitySetting.JSON_PROPERTY_NAME,
  CapabilitySetting.JSON_PROPERTY_DESCRIPTION,
  CapabilitySetting.JSON_PROPERTY_ENABLED_BY_DEFAULT,
  CapabilitySetting.JSON_PROPERTY_VISIBLE,
  CapabilitySetting.JSON_PROPERTY_ALLOWED_INSTANCES,
  CapabilitySetting.JSON_PROPERTY_MIN_INSTANCES,
  CapabilitySetting.JSON_PROPERTY_OPTIONS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-26T23:41:20.466109+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
public class CapabilitySetting {
  /**
   * Gets or Sets key
   */
  public enum KeyEnum {
    ICLOUD_VERSION("ICLOUD_VERSION"),
    
    DATA_PROTECTION_PERMISSION_LEVEL("DATA_PROTECTION_PERMISSION_LEVEL"),
    
    APPLE_ID_AUTH_APP_CONSENT("APPLE_ID_AUTH_APP_CONSENT");

    private String value;

    KeyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static KeyEnum fromValue(String value) {
      for (KeyEnum b : KeyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_KEY = "key";
  private KeyEnum key;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_ENABLED_BY_DEFAULT = "enabledByDefault";
  private Boolean enabledByDefault;

  public static final String JSON_PROPERTY_VISIBLE = "visible";
  private Boolean visible;

  /**
   * Gets or Sets allowedInstances
   */
  public enum AllowedInstancesEnum {
    ENTRY("ENTRY"),
    
    SINGLE("SINGLE"),
    
    MULTIPLE("MULTIPLE");

    private String value;

    AllowedInstancesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AllowedInstancesEnum fromValue(String value) {
      for (AllowedInstancesEnum b : AllowedInstancesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ALLOWED_INSTANCES = "allowedInstances";
  private AllowedInstancesEnum allowedInstances;

  public static final String JSON_PROPERTY_MIN_INSTANCES = "minInstances";
  private Integer minInstances;

  public static final String JSON_PROPERTY_OPTIONS = "options";
  private List<CapabilityOption> options = new ArrayList<>();

  public CapabilitySetting() { 
  }

  public CapabilitySetting key(KeyEnum key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public KeyEnum getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(KeyEnum key) {
    this.key = key;
  }


  public CapabilitySetting name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public CapabilitySetting description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public CapabilitySetting enabledByDefault(Boolean enabledByDefault) {
    this.enabledByDefault = enabledByDefault;
    return this;
  }

   /**
   * Get enabledByDefault
   * @return enabledByDefault
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLED_BY_DEFAULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnabledByDefault() {
    return enabledByDefault;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED_BY_DEFAULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnabledByDefault(Boolean enabledByDefault) {
    this.enabledByDefault = enabledByDefault;
  }


  public CapabilitySetting visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

   /**
   * Get visible
   * @return visible
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VISIBLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getVisible() {
    return visible;
  }


  @JsonProperty(JSON_PROPERTY_VISIBLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisible(Boolean visible) {
    this.visible = visible;
  }


  public CapabilitySetting allowedInstances(AllowedInstancesEnum allowedInstances) {
    this.allowedInstances = allowedInstances;
    return this;
  }

   /**
   * Get allowedInstances
   * @return allowedInstances
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOWED_INSTANCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AllowedInstancesEnum getAllowedInstances() {
    return allowedInstances;
  }


  @JsonProperty(JSON_PROPERTY_ALLOWED_INSTANCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowedInstances(AllowedInstancesEnum allowedInstances) {
    this.allowedInstances = allowedInstances;
  }


  public CapabilitySetting minInstances(Integer minInstances) {
    this.minInstances = minInstances;
    return this;
  }

   /**
   * Get minInstances
   * @return minInstances
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN_INSTANCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMinInstances() {
    return minInstances;
  }


  @JsonProperty(JSON_PROPERTY_MIN_INSTANCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinInstances(Integer minInstances) {
    this.minInstances = minInstances;
  }


  public CapabilitySetting options(List<CapabilityOption> options) {
    this.options = options;
    return this;
  }

  public CapabilitySetting addOptionsItem(CapabilityOption optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CapabilityOption> getOptions() {
    return options;
  }


  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptions(List<CapabilityOption> options) {
    this.options = options;
  }


  /**
   * Return true if this CapabilitySetting object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CapabilitySetting capabilitySetting = (CapabilitySetting) o;
    return Objects.equals(this.key, capabilitySetting.key) &&
        Objects.equals(this.name, capabilitySetting.name) &&
        Objects.equals(this.description, capabilitySetting.description) &&
        Objects.equals(this.enabledByDefault, capabilitySetting.enabledByDefault) &&
        Objects.equals(this.visible, capabilitySetting.visible) &&
        Objects.equals(this.allowedInstances, capabilitySetting.allowedInstances) &&
        Objects.equals(this.minInstances, capabilitySetting.minInstances) &&
        Objects.equals(this.options, capabilitySetting.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, name, description, enabledByDefault, visible, allowedInstances, minInstances, options);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CapabilitySetting {\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabledByDefault: ").append(toIndentedString(enabledByDefault)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    allowedInstances: ").append(toIndentedString(allowedInstances)).append("\n");
    sb.append("    minInstances: ").append(toIndentedString(minInstances)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

