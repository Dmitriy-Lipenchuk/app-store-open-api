/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.client.model.CertificateType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.client.JSON;


/**
 * CertificateCreateRequestDataAttributes
 */
@JsonPropertyOrder({
  CertificateCreateRequestDataAttributes.JSON_PROPERTY_CSR_CONTENT,
  CertificateCreateRequestDataAttributes.JSON_PROPERTY_CERTIFICATE_TYPE
})
@JsonTypeName("CertificateCreateRequest_data_attributes")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-26T23:41:20.466109+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
public class CertificateCreateRequestDataAttributes {
  public static final String JSON_PROPERTY_CSR_CONTENT = "csrContent";
  private String csrContent;

  public static final String JSON_PROPERTY_CERTIFICATE_TYPE = "certificateType";
  private CertificateType certificateType;

  public CertificateCreateRequestDataAttributes() { 
  }

  public CertificateCreateRequestDataAttributes csrContent(String csrContent) {
    this.csrContent = csrContent;
    return this;
  }

   /**
   * Get csrContent
   * @return csrContent
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CSR_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCsrContent() {
    return csrContent;
  }


  @JsonProperty(JSON_PROPERTY_CSR_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCsrContent(String csrContent) {
    this.csrContent = csrContent;
  }


  public CertificateCreateRequestDataAttributes certificateType(CertificateType certificateType) {
    this.certificateType = certificateType;
    return this;
  }

   /**
   * Get certificateType
   * @return certificateType
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CERTIFICATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CertificateType getCertificateType() {
    return certificateType;
  }


  @JsonProperty(JSON_PROPERTY_CERTIFICATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCertificateType(CertificateType certificateType) {
    this.certificateType = certificateType;
  }


  /**
   * Return true if this CertificateCreateRequest_data_attributes object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateCreateRequestDataAttributes certificateCreateRequestDataAttributes = (CertificateCreateRequestDataAttributes) o;
    return Objects.equals(this.csrContent, certificateCreateRequestDataAttributes.csrContent) &&
        Objects.equals(this.certificateType, certificateCreateRequestDataAttributes.certificateType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(csrContent, certificateType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateCreateRequestDataAttributes {\n");
    sb.append("    csrContent: ").append(toIndentedString(csrContent)).append("\n");
    sb.append("    certificateType: ").append(toIndentedString(certificateType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

