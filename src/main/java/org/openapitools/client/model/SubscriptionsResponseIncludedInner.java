/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.client.model.AppAvailabilityV2Attributes;
import org.openapitools.client.model.PromotedPurchase;
import org.openapitools.client.model.ResourceLinks;
import org.openapitools.client.model.SubscriptionAppStoreReviewScreenshot;
import org.openapitools.client.model.SubscriptionAvailability;
import org.openapitools.client.model.SubscriptionAvailabilityRelationships;
import org.openapitools.client.model.SubscriptionGroup;
import org.openapitools.client.model.SubscriptionIntroductoryOffer;
import org.openapitools.client.model.SubscriptionLocalization;
import org.openapitools.client.model.SubscriptionOfferCode;
import org.openapitools.client.model.SubscriptionPrice;
import org.openapitools.client.model.SubscriptionPromotionalOffer;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.client.JSON;

import com.fasterxml.jackson.core.type.TypeReference;

import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.openapitools.client.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-26T23:41:20.466109+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
@JsonDeserialize(using = SubscriptionsResponseIncludedInner.SubscriptionsResponseIncludedInnerDeserializer.class)
@JsonSerialize(using = SubscriptionsResponseIncludedInner.SubscriptionsResponseIncludedInnerSerializer.class)
public class SubscriptionsResponseIncludedInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(SubscriptionsResponseIncludedInner.class.getName());

    public static class SubscriptionsResponseIncludedInnerSerializer extends StdSerializer<SubscriptionsResponseIncludedInner> {
        public SubscriptionsResponseIncludedInnerSerializer(Class<SubscriptionsResponseIncludedInner> t) {
            super(t);
        }

        public SubscriptionsResponseIncludedInnerSerializer() {
            this(null);
        }

        @Override
        public void serialize(SubscriptionsResponseIncludedInner value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class SubscriptionsResponseIncludedInnerDeserializer extends StdDeserializer<SubscriptionsResponseIncludedInner> {
        public SubscriptionsResponseIncludedInnerDeserializer() {
            this(SubscriptionsResponseIncludedInner.class);
        }

        public SubscriptionsResponseIncludedInnerDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public SubscriptionsResponseIncludedInner deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize SubscriptionLocalization
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(SubscriptionLocalization.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'SubscriptionLocalization'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'SubscriptionLocalization'", e);
            }

            // deserialize SubscriptionAppStoreReviewScreenshot
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(SubscriptionAppStoreReviewScreenshot.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'SubscriptionAppStoreReviewScreenshot'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'SubscriptionAppStoreReviewScreenshot'", e);
            }

            // deserialize SubscriptionGroup
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(SubscriptionGroup.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'SubscriptionGroup'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'SubscriptionGroup'", e);
            }

            // deserialize SubscriptionIntroductoryOffer
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(SubscriptionIntroductoryOffer.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'SubscriptionIntroductoryOffer'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'SubscriptionIntroductoryOffer'", e);
            }

            // deserialize SubscriptionPromotionalOffer
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(SubscriptionPromotionalOffer.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'SubscriptionPromotionalOffer'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'SubscriptionPromotionalOffer'", e);
            }

            // deserialize SubscriptionOfferCode
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(SubscriptionOfferCode.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'SubscriptionOfferCode'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'SubscriptionOfferCode'", e);
            }

            // deserialize SubscriptionPrice
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(SubscriptionPrice.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'SubscriptionPrice'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'SubscriptionPrice'", e);
            }

            // deserialize PromotedPurchase
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PromotedPurchase.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PromotedPurchase'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PromotedPurchase'", e);
            }

            // deserialize SubscriptionAvailability
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(SubscriptionAvailability.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'SubscriptionAvailability'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'SubscriptionAvailability'", e);
            }

            if (match == 1) {
                SubscriptionsResponseIncludedInner ret = new SubscriptionsResponseIncludedInner();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for SubscriptionsResponseIncludedInner: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public SubscriptionsResponseIncludedInner getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "SubscriptionsResponseIncludedInner cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<>();

    public SubscriptionsResponseIncludedInner() {
        super("oneOf", Boolean.FALSE);
    }

    public SubscriptionsResponseIncludedInner(SubscriptionLocalization o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SubscriptionsResponseIncludedInner(SubscriptionAppStoreReviewScreenshot o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SubscriptionsResponseIncludedInner(SubscriptionGroup o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SubscriptionsResponseIncludedInner(SubscriptionIntroductoryOffer o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SubscriptionsResponseIncludedInner(SubscriptionPromotionalOffer o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SubscriptionsResponseIncludedInner(SubscriptionOfferCode o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SubscriptionsResponseIncludedInner(SubscriptionPrice o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SubscriptionsResponseIncludedInner(PromotedPurchase o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SubscriptionsResponseIncludedInner(SubscriptionAvailability o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PromotedPurchase", new GenericType<PromotedPurchase>() {
        });
        schemas.put("SubscriptionAppStoreReviewScreenshot", new GenericType<SubscriptionAppStoreReviewScreenshot>() {
        });
        schemas.put("SubscriptionAvailability", new GenericType<SubscriptionAvailability>() {
        });
        schemas.put("SubscriptionGroup", new GenericType<SubscriptionGroup>() {
        });
        schemas.put("SubscriptionIntroductoryOffer", new GenericType<SubscriptionIntroductoryOffer>() {
        });
        schemas.put("SubscriptionLocalization", new GenericType<SubscriptionLocalization>() {
        });
        schemas.put("SubscriptionOfferCode", new GenericType<SubscriptionOfferCode>() {
        });
        schemas.put("SubscriptionPrice", new GenericType<SubscriptionPrice>() {
        });
        schemas.put("SubscriptionPromotionalOffer", new GenericType<SubscriptionPromotionalOffer>() {
        });
        JSON.registerDescendants(SubscriptionsResponseIncludedInner.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return SubscriptionsResponseIncludedInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * PromotedPurchase, SubscriptionAppStoreReviewScreenshot, SubscriptionAvailability, SubscriptionGroup, SubscriptionIntroductoryOffer, SubscriptionLocalization, SubscriptionOfferCode, SubscriptionPrice, SubscriptionPromotionalOffer
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(SubscriptionLocalization.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(SubscriptionAppStoreReviewScreenshot.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(SubscriptionGroup.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(SubscriptionIntroductoryOffer.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(SubscriptionPromotionalOffer.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(SubscriptionOfferCode.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(SubscriptionPrice.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PromotedPurchase.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(SubscriptionAvailability.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be PromotedPurchase, SubscriptionAppStoreReviewScreenshot, SubscriptionAvailability, SubscriptionGroup, SubscriptionIntroductoryOffer, SubscriptionLocalization, SubscriptionOfferCode, SubscriptionPrice, SubscriptionPromotionalOffer");
    }

    /**
     * Get the actual instance, which can be the following:
     * PromotedPurchase, SubscriptionAppStoreReviewScreenshot, SubscriptionAvailability, SubscriptionGroup, SubscriptionIntroductoryOffer, SubscriptionLocalization, SubscriptionOfferCode, SubscriptionPrice, SubscriptionPromotionalOffer
     *
     * @return The actual instance (PromotedPurchase, SubscriptionAppStoreReviewScreenshot, SubscriptionAvailability, SubscriptionGroup, SubscriptionIntroductoryOffer, SubscriptionLocalization, SubscriptionOfferCode, SubscriptionPrice, SubscriptionPromotionalOffer)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `SubscriptionLocalization`. If the actual instance is not `SubscriptionLocalization`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SubscriptionLocalization`
     * @throws ClassCastException if the instance is not `SubscriptionLocalization`
     */
    public SubscriptionLocalization getSubscriptionLocalization() throws ClassCastException {
        return (SubscriptionLocalization)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SubscriptionAppStoreReviewScreenshot`. If the actual instance is not `SubscriptionAppStoreReviewScreenshot`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SubscriptionAppStoreReviewScreenshot`
     * @throws ClassCastException if the instance is not `SubscriptionAppStoreReviewScreenshot`
     */
    public SubscriptionAppStoreReviewScreenshot getSubscriptionAppStoreReviewScreenshot() throws ClassCastException {
        return (SubscriptionAppStoreReviewScreenshot)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SubscriptionGroup`. If the actual instance is not `SubscriptionGroup`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SubscriptionGroup`
     * @throws ClassCastException if the instance is not `SubscriptionGroup`
     */
    public SubscriptionGroup getSubscriptionGroup() throws ClassCastException {
        return (SubscriptionGroup)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SubscriptionIntroductoryOffer`. If the actual instance is not `SubscriptionIntroductoryOffer`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SubscriptionIntroductoryOffer`
     * @throws ClassCastException if the instance is not `SubscriptionIntroductoryOffer`
     */
    public SubscriptionIntroductoryOffer getSubscriptionIntroductoryOffer() throws ClassCastException {
        return (SubscriptionIntroductoryOffer)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SubscriptionPromotionalOffer`. If the actual instance is not `SubscriptionPromotionalOffer`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SubscriptionPromotionalOffer`
     * @throws ClassCastException if the instance is not `SubscriptionPromotionalOffer`
     */
    public SubscriptionPromotionalOffer getSubscriptionPromotionalOffer() throws ClassCastException {
        return (SubscriptionPromotionalOffer)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SubscriptionOfferCode`. If the actual instance is not `SubscriptionOfferCode`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SubscriptionOfferCode`
     * @throws ClassCastException if the instance is not `SubscriptionOfferCode`
     */
    public SubscriptionOfferCode getSubscriptionOfferCode() throws ClassCastException {
        return (SubscriptionOfferCode)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SubscriptionPrice`. If the actual instance is not `SubscriptionPrice`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SubscriptionPrice`
     * @throws ClassCastException if the instance is not `SubscriptionPrice`
     */
    public SubscriptionPrice getSubscriptionPrice() throws ClassCastException {
        return (SubscriptionPrice)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PromotedPurchase`. If the actual instance is not `PromotedPurchase`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PromotedPurchase`
     * @throws ClassCastException if the instance is not `PromotedPurchase`
     */
    public PromotedPurchase getPromotedPurchase() throws ClassCastException {
        return (PromotedPurchase)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SubscriptionAvailability`. If the actual instance is not `SubscriptionAvailability`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SubscriptionAvailability`
     * @throws ClassCastException if the instance is not `SubscriptionAvailability`
     */
    public SubscriptionAvailability getSubscriptionAvailability() throws ClassCastException {
        return (SubscriptionAvailability)super.getActualInstance();
    }

}

