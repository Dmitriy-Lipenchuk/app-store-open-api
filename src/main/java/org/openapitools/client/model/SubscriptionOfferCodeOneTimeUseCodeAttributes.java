/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.client.JSON;


/**
 * SubscriptionOfferCodeOneTimeUseCodeAttributes
 */
@JsonPropertyOrder({
  SubscriptionOfferCodeOneTimeUseCodeAttributes.JSON_PROPERTY_NUMBER_OF_CODES,
  SubscriptionOfferCodeOneTimeUseCodeAttributes.JSON_PROPERTY_CREATED_DATE,
  SubscriptionOfferCodeOneTimeUseCodeAttributes.JSON_PROPERTY_EXPIRATION_DATE,
  SubscriptionOfferCodeOneTimeUseCodeAttributes.JSON_PROPERTY_ACTIVE
})
@JsonTypeName("SubscriptionOfferCodeOneTimeUseCode_attributes")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-26T23:41:20.466109+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
public class SubscriptionOfferCodeOneTimeUseCodeAttributes {
  public static final String JSON_PROPERTY_NUMBER_OF_CODES = "numberOfCodes";
  private Integer numberOfCodes;

  public static final String JSON_PROPERTY_CREATED_DATE = "createdDate";
  private OffsetDateTime createdDate;

  public static final String JSON_PROPERTY_EXPIRATION_DATE = "expirationDate";
  private LocalDate expirationDate;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public SubscriptionOfferCodeOneTimeUseCodeAttributes() { 
  }

  public SubscriptionOfferCodeOneTimeUseCodeAttributes numberOfCodes(Integer numberOfCodes) {
    this.numberOfCodes = numberOfCodes;
    return this;
  }

   /**
   * Get numberOfCodes
   * @return numberOfCodes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumberOfCodes() {
    return numberOfCodes;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfCodes(Integer numberOfCodes) {
    this.numberOfCodes = numberOfCodes;
  }


  public SubscriptionOfferCodeOneTimeUseCodeAttributes createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Get createdDate
   * @return createdDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public SubscriptionOfferCodeOneTimeUseCodeAttributes expirationDate(LocalDate expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * Get expirationDate
   * @return expirationDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getExpirationDate() {
    return expirationDate;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpirationDate(LocalDate expirationDate) {
    this.expirationDate = expirationDate;
  }


  public SubscriptionOfferCodeOneTimeUseCodeAttributes active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  /**
   * Return true if this SubscriptionOfferCodeOneTimeUseCode_attributes object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionOfferCodeOneTimeUseCodeAttributes subscriptionOfferCodeOneTimeUseCodeAttributes = (SubscriptionOfferCodeOneTimeUseCodeAttributes) o;
    return Objects.equals(this.numberOfCodes, subscriptionOfferCodeOneTimeUseCodeAttributes.numberOfCodes) &&
        Objects.equals(this.createdDate, subscriptionOfferCodeOneTimeUseCodeAttributes.createdDate) &&
        Objects.equals(this.expirationDate, subscriptionOfferCodeOneTimeUseCodeAttributes.expirationDate) &&
        Objects.equals(this.active, subscriptionOfferCodeOneTimeUseCodeAttributes.active);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numberOfCodes, createdDate, expirationDate, active);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionOfferCodeOneTimeUseCodeAttributes {\n");
    sb.append("    numberOfCodes: ").append(toIndentedString(numberOfCodes)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

