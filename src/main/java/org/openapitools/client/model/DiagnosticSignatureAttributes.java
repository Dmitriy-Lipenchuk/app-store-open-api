/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.DiagnosticInsight;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.client.JSON;


/**
 * DiagnosticSignatureAttributes
 */
@JsonPropertyOrder({
  DiagnosticSignatureAttributes.JSON_PROPERTY_DIAGNOSTIC_TYPE,
  DiagnosticSignatureAttributes.JSON_PROPERTY_SIGNATURE,
  DiagnosticSignatureAttributes.JSON_PROPERTY_WEIGHT,
  DiagnosticSignatureAttributes.JSON_PROPERTY_INSIGHT
})
@JsonTypeName("DiagnosticSignature_attributes")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-26T23:41:20.466109+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
public class DiagnosticSignatureAttributes {
  /**
   * Gets or Sets diagnosticType
   */
  public enum DiagnosticTypeEnum {
    DISK_WRITES("DISK_WRITES"),
    
    HANGS("HANGS"),
    
    LAUNCHES("LAUNCHES");

    private String value;

    DiagnosticTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DiagnosticTypeEnum fromValue(String value) {
      for (DiagnosticTypeEnum b : DiagnosticTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DIAGNOSTIC_TYPE = "diagnosticType";
  private DiagnosticTypeEnum diagnosticType;

  public static final String JSON_PROPERTY_SIGNATURE = "signature";
  private String signature;

  public static final String JSON_PROPERTY_WEIGHT = "weight";
  private BigDecimal weight;

  public static final String JSON_PROPERTY_INSIGHT = "insight";
  private DiagnosticInsight insight;

  public DiagnosticSignatureAttributes() { 
  }

  public DiagnosticSignatureAttributes diagnosticType(DiagnosticTypeEnum diagnosticType) {
    this.diagnosticType = diagnosticType;
    return this;
  }

   /**
   * Get diagnosticType
   * @return diagnosticType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIAGNOSTIC_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DiagnosticTypeEnum getDiagnosticType() {
    return diagnosticType;
  }


  @JsonProperty(JSON_PROPERTY_DIAGNOSTIC_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDiagnosticType(DiagnosticTypeEnum diagnosticType) {
    this.diagnosticType = diagnosticType;
  }


  public DiagnosticSignatureAttributes signature(String signature) {
    this.signature = signature;
    return this;
  }

   /**
   * Get signature
   * @return signature
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSignature() {
    return signature;
  }


  @JsonProperty(JSON_PROPERTY_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSignature(String signature) {
    this.signature = signature;
  }


  public DiagnosticSignatureAttributes weight(BigDecimal weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Get weight
   * @return weight
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getWeight() {
    return weight;
  }


  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWeight(BigDecimal weight) {
    this.weight = weight;
  }


  public DiagnosticSignatureAttributes insight(DiagnosticInsight insight) {
    this.insight = insight;
    return this;
  }

   /**
   * Get insight
   * @return insight
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INSIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DiagnosticInsight getInsight() {
    return insight;
  }


  @JsonProperty(JSON_PROPERTY_INSIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInsight(DiagnosticInsight insight) {
    this.insight = insight;
  }


  /**
   * Return true if this DiagnosticSignature_attributes object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiagnosticSignatureAttributes diagnosticSignatureAttributes = (DiagnosticSignatureAttributes) o;
    return Objects.equals(this.diagnosticType, diagnosticSignatureAttributes.diagnosticType) &&
        Objects.equals(this.signature, diagnosticSignatureAttributes.signature) &&
        Objects.equals(this.weight, diagnosticSignatureAttributes.weight) &&
        Objects.equals(this.insight, diagnosticSignatureAttributes.insight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diagnosticType, signature, weight, insight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiagnosticSignatureAttributes {\n");
    sb.append("    diagnosticType: ").append(toIndentedString(diagnosticType)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    insight: ").append(toIndentedString(insight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

