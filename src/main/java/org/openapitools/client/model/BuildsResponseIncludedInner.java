/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.client.model.App;
import org.openapitools.client.model.AppEncryptionDeclaration;
import org.openapitools.client.model.AppStoreVersion;
import org.openapitools.client.model.BetaAppReviewSubmission;
import org.openapitools.client.model.BetaBuildLocalization;
import org.openapitools.client.model.BetaGroup;
import org.openapitools.client.model.BetaTester;
import org.openapitools.client.model.BuildBetaDetail;
import org.openapitools.client.model.BuildBundle;
import org.openapitools.client.model.BuildBundleAttributes;
import org.openapitools.client.model.BuildBundleRelationships;
import org.openapitools.client.model.BuildIcon;
import org.openapitools.client.model.PrereleaseVersion;
import org.openapitools.client.model.ResourceLinks;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.client.JSON;

import com.fasterxml.jackson.core.type.TypeReference;

import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.openapitools.client.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-26T23:41:20.466109+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
@JsonDeserialize(using = BuildsResponseIncludedInner.BuildsResponseIncludedInnerDeserializer.class)
@JsonSerialize(using = BuildsResponseIncludedInner.BuildsResponseIncludedInnerSerializer.class)
public class BuildsResponseIncludedInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(BuildsResponseIncludedInner.class.getName());

    public static class BuildsResponseIncludedInnerSerializer extends StdSerializer<BuildsResponseIncludedInner> {
        public BuildsResponseIncludedInnerSerializer(Class<BuildsResponseIncludedInner> t) {
            super(t);
        }

        public BuildsResponseIncludedInnerSerializer() {
            this(null);
        }

        @Override
        public void serialize(BuildsResponseIncludedInner value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class BuildsResponseIncludedInnerDeserializer extends StdDeserializer<BuildsResponseIncludedInner> {
        public BuildsResponseIncludedInnerDeserializer() {
            this(BuildsResponseIncludedInner.class);
        }

        public BuildsResponseIncludedInnerDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public BuildsResponseIncludedInner deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize PrereleaseVersion
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PrereleaseVersion.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PrereleaseVersion'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PrereleaseVersion'", e);
            }

            // deserialize BetaTester
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BetaTester.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BetaTester'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BetaTester'", e);
            }

            // deserialize BetaGroup
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BetaGroup.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BetaGroup'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BetaGroup'", e);
            }

            // deserialize BetaBuildLocalization
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BetaBuildLocalization.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BetaBuildLocalization'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BetaBuildLocalization'", e);
            }

            // deserialize AppEncryptionDeclaration
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AppEncryptionDeclaration.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AppEncryptionDeclaration'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AppEncryptionDeclaration'", e);
            }

            // deserialize BetaAppReviewSubmission
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BetaAppReviewSubmission.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BetaAppReviewSubmission'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BetaAppReviewSubmission'", e);
            }

            // deserialize App
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(App.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'App'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'App'", e);
            }

            // deserialize BuildBetaDetail
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BuildBetaDetail.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BuildBetaDetail'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BuildBetaDetail'", e);
            }

            // deserialize AppStoreVersion
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AppStoreVersion.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AppStoreVersion'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AppStoreVersion'", e);
            }

            // deserialize BuildIcon
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BuildIcon.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BuildIcon'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BuildIcon'", e);
            }

            // deserialize BuildBundle
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BuildBundle.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BuildBundle'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BuildBundle'", e);
            }

            if (match == 1) {
                BuildsResponseIncludedInner ret = new BuildsResponseIncludedInner();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for BuildsResponseIncludedInner: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public BuildsResponseIncludedInner getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "BuildsResponseIncludedInner cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<>();

    public BuildsResponseIncludedInner() {
        super("oneOf", Boolean.FALSE);
    }

    public BuildsResponseIncludedInner(PrereleaseVersion o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BuildsResponseIncludedInner(BetaTester o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BuildsResponseIncludedInner(BetaGroup o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BuildsResponseIncludedInner(BetaBuildLocalization o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BuildsResponseIncludedInner(AppEncryptionDeclaration o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BuildsResponseIncludedInner(BetaAppReviewSubmission o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BuildsResponseIncludedInner(App o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BuildsResponseIncludedInner(BuildBetaDetail o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BuildsResponseIncludedInner(AppStoreVersion o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BuildsResponseIncludedInner(BuildIcon o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BuildsResponseIncludedInner(BuildBundle o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("App", new GenericType<App>() {
        });
        schemas.put("AppEncryptionDeclaration", new GenericType<AppEncryptionDeclaration>() {
        });
        schemas.put("AppStoreVersion", new GenericType<AppStoreVersion>() {
        });
        schemas.put("BetaAppReviewSubmission", new GenericType<BetaAppReviewSubmission>() {
        });
        schemas.put("BetaBuildLocalization", new GenericType<BetaBuildLocalization>() {
        });
        schemas.put("BetaGroup", new GenericType<BetaGroup>() {
        });
        schemas.put("BetaTester", new GenericType<BetaTester>() {
        });
        schemas.put("BuildBetaDetail", new GenericType<BuildBetaDetail>() {
        });
        schemas.put("BuildBundle", new GenericType<BuildBundle>() {
        });
        schemas.put("BuildIcon", new GenericType<BuildIcon>() {
        });
        schemas.put("PrereleaseVersion", new GenericType<PrereleaseVersion>() {
        });
        JSON.registerDescendants(BuildsResponseIncludedInner.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return BuildsResponseIncludedInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * App, AppEncryptionDeclaration, AppStoreVersion, BetaAppReviewSubmission, BetaBuildLocalization, BetaGroup, BetaTester, BuildBetaDetail, BuildBundle, BuildIcon, PrereleaseVersion
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(PrereleaseVersion.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BetaTester.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BetaGroup.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BetaBuildLocalization.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AppEncryptionDeclaration.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BetaAppReviewSubmission.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(App.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BuildBetaDetail.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AppStoreVersion.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BuildIcon.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BuildBundle.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be App, AppEncryptionDeclaration, AppStoreVersion, BetaAppReviewSubmission, BetaBuildLocalization, BetaGroup, BetaTester, BuildBetaDetail, BuildBundle, BuildIcon, PrereleaseVersion");
    }

    /**
     * Get the actual instance, which can be the following:
     * App, AppEncryptionDeclaration, AppStoreVersion, BetaAppReviewSubmission, BetaBuildLocalization, BetaGroup, BetaTester, BuildBetaDetail, BuildBundle, BuildIcon, PrereleaseVersion
     *
     * @return The actual instance (App, AppEncryptionDeclaration, AppStoreVersion, BetaAppReviewSubmission, BetaBuildLocalization, BetaGroup, BetaTester, BuildBetaDetail, BuildBundle, BuildIcon, PrereleaseVersion)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PrereleaseVersion`. If the actual instance is not `PrereleaseVersion`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PrereleaseVersion`
     * @throws ClassCastException if the instance is not `PrereleaseVersion`
     */
    public PrereleaseVersion getPrereleaseVersion() throws ClassCastException {
        return (PrereleaseVersion)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BetaTester`. If the actual instance is not `BetaTester`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BetaTester`
     * @throws ClassCastException if the instance is not `BetaTester`
     */
    public BetaTester getBetaTester() throws ClassCastException {
        return (BetaTester)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BetaGroup`. If the actual instance is not `BetaGroup`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BetaGroup`
     * @throws ClassCastException if the instance is not `BetaGroup`
     */
    public BetaGroup getBetaGroup() throws ClassCastException {
        return (BetaGroup)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BetaBuildLocalization`. If the actual instance is not `BetaBuildLocalization`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BetaBuildLocalization`
     * @throws ClassCastException if the instance is not `BetaBuildLocalization`
     */
    public BetaBuildLocalization getBetaBuildLocalization() throws ClassCastException {
        return (BetaBuildLocalization)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppEncryptionDeclaration`. If the actual instance is not `AppEncryptionDeclaration`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppEncryptionDeclaration`
     * @throws ClassCastException if the instance is not `AppEncryptionDeclaration`
     */
    public AppEncryptionDeclaration getAppEncryptionDeclaration() throws ClassCastException {
        return (AppEncryptionDeclaration)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BetaAppReviewSubmission`. If the actual instance is not `BetaAppReviewSubmission`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BetaAppReviewSubmission`
     * @throws ClassCastException if the instance is not `BetaAppReviewSubmission`
     */
    public BetaAppReviewSubmission getBetaAppReviewSubmission() throws ClassCastException {
        return (BetaAppReviewSubmission)super.getActualInstance();
    }

    /**
     * Get the actual instance of `App`. If the actual instance is not `App`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `App`
     * @throws ClassCastException if the instance is not `App`
     */
    public App getApp() throws ClassCastException {
        return (App)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BuildBetaDetail`. If the actual instance is not `BuildBetaDetail`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BuildBetaDetail`
     * @throws ClassCastException if the instance is not `BuildBetaDetail`
     */
    public BuildBetaDetail getBuildBetaDetail() throws ClassCastException {
        return (BuildBetaDetail)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppStoreVersion`. If the actual instance is not `AppStoreVersion`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppStoreVersion`
     * @throws ClassCastException if the instance is not `AppStoreVersion`
     */
    public AppStoreVersion getAppStoreVersion() throws ClassCastException {
        return (AppStoreVersion)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BuildIcon`. If the actual instance is not `BuildIcon`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BuildIcon`
     * @throws ClassCastException if the instance is not `BuildIcon`
     */
    public BuildIcon getBuildIcon() throws ClassCastException {
        return (BuildIcon)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BuildBundle`. If the actual instance is not `BuildBundle`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BuildBundle`
     * @throws ClassCastException if the instance is not `BuildBundle`
     */
    public BuildBundle getBuildBundle() throws ClassCastException {
        return (BuildBundle)super.getActualInstance();
    }

}

