/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.client.model.AppAvailabilityV2Attributes;
import org.openapitools.client.model.InAppPurchaseAppStoreReviewScreenshot;
import org.openapitools.client.model.InAppPurchaseAvailability;
import org.openapitools.client.model.InAppPurchaseAvailabilityRelationships;
import org.openapitools.client.model.InAppPurchaseContent;
import org.openapitools.client.model.InAppPurchaseLocalization;
import org.openapitools.client.model.InAppPurchasePricePoint;
import org.openapitools.client.model.InAppPurchasePriceSchedule;
import org.openapitools.client.model.PromotedPurchase;
import org.openapitools.client.model.ResourceLinks;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.client.JSON;

import com.fasterxml.jackson.core.type.TypeReference;

import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.openapitools.client.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-26T23:41:20.466109+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
@JsonDeserialize(using = InAppPurchasesV2ResponseIncludedInner.InAppPurchasesV2ResponseIncludedInnerDeserializer.class)
@JsonSerialize(using = InAppPurchasesV2ResponseIncludedInner.InAppPurchasesV2ResponseIncludedInnerSerializer.class)
public class InAppPurchasesV2ResponseIncludedInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(InAppPurchasesV2ResponseIncludedInner.class.getName());

    public static class InAppPurchasesV2ResponseIncludedInnerSerializer extends StdSerializer<InAppPurchasesV2ResponseIncludedInner> {
        public InAppPurchasesV2ResponseIncludedInnerSerializer(Class<InAppPurchasesV2ResponseIncludedInner> t) {
            super(t);
        }

        public InAppPurchasesV2ResponseIncludedInnerSerializer() {
            this(null);
        }

        @Override
        public void serialize(InAppPurchasesV2ResponseIncludedInner value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class InAppPurchasesV2ResponseIncludedInnerDeserializer extends StdDeserializer<InAppPurchasesV2ResponseIncludedInner> {
        public InAppPurchasesV2ResponseIncludedInnerDeserializer() {
            this(InAppPurchasesV2ResponseIncludedInner.class);
        }

        public InAppPurchasesV2ResponseIncludedInnerDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public InAppPurchasesV2ResponseIncludedInner deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize InAppPurchaseLocalization
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(InAppPurchaseLocalization.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'InAppPurchaseLocalization'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'InAppPurchaseLocalization'", e);
            }

            // deserialize InAppPurchasePricePoint
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(InAppPurchasePricePoint.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'InAppPurchasePricePoint'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'InAppPurchasePricePoint'", e);
            }

            // deserialize InAppPurchaseContent
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(InAppPurchaseContent.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'InAppPurchaseContent'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'InAppPurchaseContent'", e);
            }

            // deserialize InAppPurchaseAppStoreReviewScreenshot
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(InAppPurchaseAppStoreReviewScreenshot.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'InAppPurchaseAppStoreReviewScreenshot'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'InAppPurchaseAppStoreReviewScreenshot'", e);
            }

            // deserialize PromotedPurchase
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PromotedPurchase.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PromotedPurchase'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PromotedPurchase'", e);
            }

            // deserialize InAppPurchasePriceSchedule
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(InAppPurchasePriceSchedule.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'InAppPurchasePriceSchedule'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'InAppPurchasePriceSchedule'", e);
            }

            // deserialize InAppPurchaseAvailability
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(InAppPurchaseAvailability.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'InAppPurchaseAvailability'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'InAppPurchaseAvailability'", e);
            }

            if (match == 1) {
                InAppPurchasesV2ResponseIncludedInner ret = new InAppPurchasesV2ResponseIncludedInner();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for InAppPurchasesV2ResponseIncludedInner: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public InAppPurchasesV2ResponseIncludedInner getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "InAppPurchasesV2ResponseIncludedInner cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<>();

    public InAppPurchasesV2ResponseIncludedInner() {
        super("oneOf", Boolean.FALSE);
    }

    public InAppPurchasesV2ResponseIncludedInner(InAppPurchaseLocalization o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public InAppPurchasesV2ResponseIncludedInner(InAppPurchasePricePoint o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public InAppPurchasesV2ResponseIncludedInner(InAppPurchaseContent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public InAppPurchasesV2ResponseIncludedInner(InAppPurchaseAppStoreReviewScreenshot o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public InAppPurchasesV2ResponseIncludedInner(PromotedPurchase o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public InAppPurchasesV2ResponseIncludedInner(InAppPurchasePriceSchedule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public InAppPurchasesV2ResponseIncludedInner(InAppPurchaseAvailability o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("InAppPurchaseAppStoreReviewScreenshot", new GenericType<InAppPurchaseAppStoreReviewScreenshot>() {
        });
        schemas.put("InAppPurchaseAvailability", new GenericType<InAppPurchaseAvailability>() {
        });
        schemas.put("InAppPurchaseContent", new GenericType<InAppPurchaseContent>() {
        });
        schemas.put("InAppPurchaseLocalization", new GenericType<InAppPurchaseLocalization>() {
        });
        schemas.put("InAppPurchasePricePoint", new GenericType<InAppPurchasePricePoint>() {
        });
        schemas.put("InAppPurchasePriceSchedule", new GenericType<InAppPurchasePriceSchedule>() {
        });
        schemas.put("PromotedPurchase", new GenericType<PromotedPurchase>() {
        });
        JSON.registerDescendants(InAppPurchasesV2ResponseIncludedInner.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return InAppPurchasesV2ResponseIncludedInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * InAppPurchaseAppStoreReviewScreenshot, InAppPurchaseAvailability, InAppPurchaseContent, InAppPurchaseLocalization, InAppPurchasePricePoint, InAppPurchasePriceSchedule, PromotedPurchase
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(InAppPurchaseLocalization.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(InAppPurchasePricePoint.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(InAppPurchaseContent.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(InAppPurchaseAppStoreReviewScreenshot.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PromotedPurchase.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(InAppPurchasePriceSchedule.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(InAppPurchaseAvailability.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be InAppPurchaseAppStoreReviewScreenshot, InAppPurchaseAvailability, InAppPurchaseContent, InAppPurchaseLocalization, InAppPurchasePricePoint, InAppPurchasePriceSchedule, PromotedPurchase");
    }

    /**
     * Get the actual instance, which can be the following:
     * InAppPurchaseAppStoreReviewScreenshot, InAppPurchaseAvailability, InAppPurchaseContent, InAppPurchaseLocalization, InAppPurchasePricePoint, InAppPurchasePriceSchedule, PromotedPurchase
     *
     * @return The actual instance (InAppPurchaseAppStoreReviewScreenshot, InAppPurchaseAvailability, InAppPurchaseContent, InAppPurchaseLocalization, InAppPurchasePricePoint, InAppPurchasePriceSchedule, PromotedPurchase)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `InAppPurchaseLocalization`. If the actual instance is not `InAppPurchaseLocalization`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InAppPurchaseLocalization`
     * @throws ClassCastException if the instance is not `InAppPurchaseLocalization`
     */
    public InAppPurchaseLocalization getInAppPurchaseLocalization() throws ClassCastException {
        return (InAppPurchaseLocalization)super.getActualInstance();
    }

    /**
     * Get the actual instance of `InAppPurchasePricePoint`. If the actual instance is not `InAppPurchasePricePoint`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InAppPurchasePricePoint`
     * @throws ClassCastException if the instance is not `InAppPurchasePricePoint`
     */
    public InAppPurchasePricePoint getInAppPurchasePricePoint() throws ClassCastException {
        return (InAppPurchasePricePoint)super.getActualInstance();
    }

    /**
     * Get the actual instance of `InAppPurchaseContent`. If the actual instance is not `InAppPurchaseContent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InAppPurchaseContent`
     * @throws ClassCastException if the instance is not `InAppPurchaseContent`
     */
    public InAppPurchaseContent getInAppPurchaseContent() throws ClassCastException {
        return (InAppPurchaseContent)super.getActualInstance();
    }

    /**
     * Get the actual instance of `InAppPurchaseAppStoreReviewScreenshot`. If the actual instance is not `InAppPurchaseAppStoreReviewScreenshot`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InAppPurchaseAppStoreReviewScreenshot`
     * @throws ClassCastException if the instance is not `InAppPurchaseAppStoreReviewScreenshot`
     */
    public InAppPurchaseAppStoreReviewScreenshot getInAppPurchaseAppStoreReviewScreenshot() throws ClassCastException {
        return (InAppPurchaseAppStoreReviewScreenshot)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PromotedPurchase`. If the actual instance is not `PromotedPurchase`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PromotedPurchase`
     * @throws ClassCastException if the instance is not `PromotedPurchase`
     */
    public PromotedPurchase getPromotedPurchase() throws ClassCastException {
        return (PromotedPurchase)super.getActualInstance();
    }

    /**
     * Get the actual instance of `InAppPurchasePriceSchedule`. If the actual instance is not `InAppPurchasePriceSchedule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InAppPurchasePriceSchedule`
     * @throws ClassCastException if the instance is not `InAppPurchasePriceSchedule`
     */
    public InAppPurchasePriceSchedule getInAppPurchasePriceSchedule() throws ClassCastException {
        return (InAppPurchasePriceSchedule)super.getActualInstance();
    }

    /**
     * Get the actual instance of `InAppPurchaseAvailability`. If the actual instance is not `InAppPurchaseAvailability`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InAppPurchaseAvailability`
     * @throws ClassCastException if the instance is not `InAppPurchaseAvailability`
     */
    public InAppPurchaseAvailability getInAppPurchaseAvailability() throws ClassCastException {
        return (InAppPurchaseAvailability)super.getActualInstance();
    }

}

