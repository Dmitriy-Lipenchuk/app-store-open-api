/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.client.model.AgeRatingDeclaration;
import org.openapitools.client.model.AlternativeDistributionPackage;
import org.openapitools.client.model.AlternativeDistributionPackageRelationships;
import org.openapitools.client.model.App;
import org.openapitools.client.model.AppClipDefaultExperience;
import org.openapitools.client.model.AppStoreReviewDetail;
import org.openapitools.client.model.AppStoreVersionExperiment;
import org.openapitools.client.model.AppStoreVersionExperimentV2;
import org.openapitools.client.model.AppStoreVersionExperimentV2Attributes;
import org.openapitools.client.model.AppStoreVersionLocalization;
import org.openapitools.client.model.AppStoreVersionPhasedRelease;
import org.openapitools.client.model.AppStoreVersionSubmission;
import org.openapitools.client.model.Build;
import org.openapitools.client.model.ResourceLinks;
import org.openapitools.client.model.RoutingAppCoverage;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.client.JSON;

import com.fasterxml.jackson.core.type.TypeReference;

import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.openapitools.client.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-26T23:41:20.466109+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
@JsonDeserialize(using = AppStoreVersionsResponseIncludedInner.AppStoreVersionsResponseIncludedInnerDeserializer.class)
@JsonSerialize(using = AppStoreVersionsResponseIncludedInner.AppStoreVersionsResponseIncludedInnerSerializer.class)
public class AppStoreVersionsResponseIncludedInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AppStoreVersionsResponseIncludedInner.class.getName());

    public static class AppStoreVersionsResponseIncludedInnerSerializer extends StdSerializer<AppStoreVersionsResponseIncludedInner> {
        public AppStoreVersionsResponseIncludedInnerSerializer(Class<AppStoreVersionsResponseIncludedInner> t) {
            super(t);
        }

        public AppStoreVersionsResponseIncludedInnerSerializer() {
            this(null);
        }

        @Override
        public void serialize(AppStoreVersionsResponseIncludedInner value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class AppStoreVersionsResponseIncludedInnerDeserializer extends StdDeserializer<AppStoreVersionsResponseIncludedInner> {
        public AppStoreVersionsResponseIncludedInnerDeserializer() {
            this(AppStoreVersionsResponseIncludedInner.class);
        }

        public AppStoreVersionsResponseIncludedInnerDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public AppStoreVersionsResponseIncludedInner deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize App
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(App.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'App'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'App'", e);
            }

            // deserialize AgeRatingDeclaration
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AgeRatingDeclaration.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AgeRatingDeclaration'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AgeRatingDeclaration'", e);
            }

            // deserialize AppStoreVersionLocalization
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AppStoreVersionLocalization.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AppStoreVersionLocalization'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AppStoreVersionLocalization'", e);
            }

            // deserialize Build
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(Build.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'Build'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'Build'", e);
            }

            // deserialize AppStoreVersionPhasedRelease
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AppStoreVersionPhasedRelease.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AppStoreVersionPhasedRelease'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AppStoreVersionPhasedRelease'", e);
            }

            // deserialize RoutingAppCoverage
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(RoutingAppCoverage.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'RoutingAppCoverage'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'RoutingAppCoverage'", e);
            }

            // deserialize AppStoreReviewDetail
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AppStoreReviewDetail.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AppStoreReviewDetail'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AppStoreReviewDetail'", e);
            }

            // deserialize AppStoreVersionSubmission
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AppStoreVersionSubmission.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AppStoreVersionSubmission'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AppStoreVersionSubmission'", e);
            }

            // deserialize AppClipDefaultExperience
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AppClipDefaultExperience.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AppClipDefaultExperience'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AppClipDefaultExperience'", e);
            }

            // deserialize AppStoreVersionExperiment
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AppStoreVersionExperiment.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AppStoreVersionExperiment'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AppStoreVersionExperiment'", e);
            }

            // deserialize AppStoreVersionExperimentV2
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AppStoreVersionExperimentV2.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AppStoreVersionExperimentV2'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AppStoreVersionExperimentV2'", e);
            }

            // deserialize AlternativeDistributionPackage
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AlternativeDistributionPackage.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AlternativeDistributionPackage'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AlternativeDistributionPackage'", e);
            }

            if (match == 1) {
                AppStoreVersionsResponseIncludedInner ret = new AppStoreVersionsResponseIncludedInner();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for AppStoreVersionsResponseIncludedInner: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public AppStoreVersionsResponseIncludedInner getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "AppStoreVersionsResponseIncludedInner cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<>();

    public AppStoreVersionsResponseIncludedInner() {
        super("oneOf", Boolean.FALSE);
    }

    public AppStoreVersionsResponseIncludedInner(App o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppStoreVersionsResponseIncludedInner(AgeRatingDeclaration o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppStoreVersionsResponseIncludedInner(AppStoreVersionLocalization o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppStoreVersionsResponseIncludedInner(Build o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppStoreVersionsResponseIncludedInner(AppStoreVersionPhasedRelease o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppStoreVersionsResponseIncludedInner(RoutingAppCoverage o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppStoreVersionsResponseIncludedInner(AppStoreReviewDetail o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppStoreVersionsResponseIncludedInner(AppStoreVersionSubmission o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppStoreVersionsResponseIncludedInner(AppClipDefaultExperience o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppStoreVersionsResponseIncludedInner(AppStoreVersionExperiment o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppStoreVersionsResponseIncludedInner(AppStoreVersionExperimentV2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AppStoreVersionsResponseIncludedInner(AlternativeDistributionPackage o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AgeRatingDeclaration", new GenericType<AgeRatingDeclaration>() {
        });
        schemas.put("AlternativeDistributionPackage", new GenericType<AlternativeDistributionPackage>() {
        });
        schemas.put("App", new GenericType<App>() {
        });
        schemas.put("AppClipDefaultExperience", new GenericType<AppClipDefaultExperience>() {
        });
        schemas.put("AppStoreReviewDetail", new GenericType<AppStoreReviewDetail>() {
        });
        schemas.put("AppStoreVersionExperiment", new GenericType<AppStoreVersionExperiment>() {
        });
        schemas.put("AppStoreVersionExperimentV2", new GenericType<AppStoreVersionExperimentV2>() {
        });
        schemas.put("AppStoreVersionLocalization", new GenericType<AppStoreVersionLocalization>() {
        });
        schemas.put("AppStoreVersionPhasedRelease", new GenericType<AppStoreVersionPhasedRelease>() {
        });
        schemas.put("AppStoreVersionSubmission", new GenericType<AppStoreVersionSubmission>() {
        });
        schemas.put("Build", new GenericType<Build>() {
        });
        schemas.put("RoutingAppCoverage", new GenericType<RoutingAppCoverage>() {
        });
        JSON.registerDescendants(AppStoreVersionsResponseIncludedInner.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return AppStoreVersionsResponseIncludedInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AgeRatingDeclaration, AlternativeDistributionPackage, App, AppClipDefaultExperience, AppStoreReviewDetail, AppStoreVersionExperiment, AppStoreVersionExperimentV2, AppStoreVersionLocalization, AppStoreVersionPhasedRelease, AppStoreVersionSubmission, Build, RoutingAppCoverage
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(App.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AgeRatingDeclaration.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AppStoreVersionLocalization.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(Build.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AppStoreVersionPhasedRelease.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(RoutingAppCoverage.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AppStoreReviewDetail.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AppStoreVersionSubmission.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AppClipDefaultExperience.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AppStoreVersionExperiment.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AppStoreVersionExperimentV2.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AlternativeDistributionPackage.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AgeRatingDeclaration, AlternativeDistributionPackage, App, AppClipDefaultExperience, AppStoreReviewDetail, AppStoreVersionExperiment, AppStoreVersionExperimentV2, AppStoreVersionLocalization, AppStoreVersionPhasedRelease, AppStoreVersionSubmission, Build, RoutingAppCoverage");
    }

    /**
     * Get the actual instance, which can be the following:
     * AgeRatingDeclaration, AlternativeDistributionPackage, App, AppClipDefaultExperience, AppStoreReviewDetail, AppStoreVersionExperiment, AppStoreVersionExperimentV2, AppStoreVersionLocalization, AppStoreVersionPhasedRelease, AppStoreVersionSubmission, Build, RoutingAppCoverage
     *
     * @return The actual instance (AgeRatingDeclaration, AlternativeDistributionPackage, App, AppClipDefaultExperience, AppStoreReviewDetail, AppStoreVersionExperiment, AppStoreVersionExperimentV2, AppStoreVersionLocalization, AppStoreVersionPhasedRelease, AppStoreVersionSubmission, Build, RoutingAppCoverage)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `App`. If the actual instance is not `App`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `App`
     * @throws ClassCastException if the instance is not `App`
     */
    public App getApp() throws ClassCastException {
        return (App)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AgeRatingDeclaration`. If the actual instance is not `AgeRatingDeclaration`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AgeRatingDeclaration`
     * @throws ClassCastException if the instance is not `AgeRatingDeclaration`
     */
    public AgeRatingDeclaration getAgeRatingDeclaration() throws ClassCastException {
        return (AgeRatingDeclaration)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppStoreVersionLocalization`. If the actual instance is not `AppStoreVersionLocalization`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppStoreVersionLocalization`
     * @throws ClassCastException if the instance is not `AppStoreVersionLocalization`
     */
    public AppStoreVersionLocalization getAppStoreVersionLocalization() throws ClassCastException {
        return (AppStoreVersionLocalization)super.getActualInstance();
    }

    /**
     * Get the actual instance of `Build`. If the actual instance is not `Build`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Build`
     * @throws ClassCastException if the instance is not `Build`
     */
    public Build getBuild() throws ClassCastException {
        return (Build)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppStoreVersionPhasedRelease`. If the actual instance is not `AppStoreVersionPhasedRelease`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppStoreVersionPhasedRelease`
     * @throws ClassCastException if the instance is not `AppStoreVersionPhasedRelease`
     */
    public AppStoreVersionPhasedRelease getAppStoreVersionPhasedRelease() throws ClassCastException {
        return (AppStoreVersionPhasedRelease)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RoutingAppCoverage`. If the actual instance is not `RoutingAppCoverage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RoutingAppCoverage`
     * @throws ClassCastException if the instance is not `RoutingAppCoverage`
     */
    public RoutingAppCoverage getRoutingAppCoverage() throws ClassCastException {
        return (RoutingAppCoverage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppStoreReviewDetail`. If the actual instance is not `AppStoreReviewDetail`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppStoreReviewDetail`
     * @throws ClassCastException if the instance is not `AppStoreReviewDetail`
     */
    public AppStoreReviewDetail getAppStoreReviewDetail() throws ClassCastException {
        return (AppStoreReviewDetail)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppStoreVersionSubmission`. If the actual instance is not `AppStoreVersionSubmission`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppStoreVersionSubmission`
     * @throws ClassCastException if the instance is not `AppStoreVersionSubmission`
     */
    public AppStoreVersionSubmission getAppStoreVersionSubmission() throws ClassCastException {
        return (AppStoreVersionSubmission)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppClipDefaultExperience`. If the actual instance is not `AppClipDefaultExperience`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppClipDefaultExperience`
     * @throws ClassCastException if the instance is not `AppClipDefaultExperience`
     */
    public AppClipDefaultExperience getAppClipDefaultExperience() throws ClassCastException {
        return (AppClipDefaultExperience)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppStoreVersionExperiment`. If the actual instance is not `AppStoreVersionExperiment`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppStoreVersionExperiment`
     * @throws ClassCastException if the instance is not `AppStoreVersionExperiment`
     */
    public AppStoreVersionExperiment getAppStoreVersionExperiment() throws ClassCastException {
        return (AppStoreVersionExperiment)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppStoreVersionExperimentV2`. If the actual instance is not `AppStoreVersionExperimentV2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppStoreVersionExperimentV2`
     * @throws ClassCastException if the instance is not `AppStoreVersionExperimentV2`
     */
    public AppStoreVersionExperimentV2 getAppStoreVersionExperimentV2() throws ClassCastException {
        return (AppStoreVersionExperimentV2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AlternativeDistributionPackage`. If the actual instance is not `AlternativeDistributionPackage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AlternativeDistributionPackage`
     * @throws ClassCastException if the instance is not `AlternativeDistributionPackage`
     */
    public AlternativeDistributionPackage getAlternativeDistributionPackage() throws ClassCastException {
        return (AlternativeDistributionPackage)super.getActualInstance();
    }

}

