/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.*;
import org.openapitools.client.auth.*;
import org.openapitools.client.model.AgeRatingDeclarationWithoutIncludesResponse;
import org.openapitools.client.model.AlternativeDistributionPackageResponse;
import org.openapitools.client.model.AppClipDefaultExperienceResponse;
import org.openapitools.client.model.AppStoreReviewDetailResponse;
import org.openapitools.client.model.AppStoreVersionAppClipDefaultExperienceLinkageRequest;
import org.openapitools.client.model.AppStoreVersionAppClipDefaultExperienceLinkageResponse;
import org.openapitools.client.model.AppStoreVersionBuildLinkageRequest;
import org.openapitools.client.model.AppStoreVersionBuildLinkageResponse;
import org.openapitools.client.model.AppStoreVersionCreateRequest;
import org.openapitools.client.model.AppStoreVersionExperimentsResponse;
import org.openapitools.client.model.AppStoreVersionExperimentsV2Response;
import org.openapitools.client.model.AppStoreVersionLocalizationsResponse;
import org.openapitools.client.model.AppStoreVersionPhasedReleaseWithoutIncludesResponse;
import org.openapitools.client.model.AppStoreVersionResponse;
import org.openapitools.client.model.AppStoreVersionSubmissionResponse;
import org.openapitools.client.model.AppStoreVersionUpdateRequest;
import org.openapitools.client.model.BuildWithoutIncludesResponse;
import org.openapitools.client.model.CustomerReviewsResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.RoutingAppCoverageWithoutIncludesResponse;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppStoreVersionsApi
 */
public class AppStoreVersionsApiTest {

    private final AppStoreVersionsApi api = new AppStoreVersionsApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsAgeRatingDeclarationGetToOneRelatedTest() throws ApiException {
        //String id = null;
        //List<String> fieldsAgeRatingDeclarations = null;
        //AgeRatingDeclarationWithoutIncludesResponse response = api.appStoreVersionsAgeRatingDeclarationGetToOneRelated(id, fieldsAgeRatingDeclarations);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsAlternativeDistributionPackageGetToOneRelatedTest() throws ApiException {
        //String id = null;
        //List<String> fieldsAlternativeDistributionPackages = null;
        //List<String> fieldsAlternativeDistributionPackageVersions = null;
        //Integer limitVersions = null;
        //List<String> include = null;
        //AlternativeDistributionPackageResponse response = api.appStoreVersionsAlternativeDistributionPackageGetToOneRelated(id, fieldsAlternativeDistributionPackages, fieldsAlternativeDistributionPackageVersions, limitVersions, include);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsAppClipDefaultExperienceGetToOneRelatedTest() throws ApiException {
        //String id = null;
        //List<String> fieldsAppClips = null;
        //List<String> fieldsAppClipAppStoreReviewDetails = null;
        //List<String> fieldsAppStoreVersions = null;
        //List<String> fieldsAppClipDefaultExperiences = null;
        //List<String> fieldsAppClipDefaultExperienceLocalizations = null;
        //Integer limitAppClipDefaultExperienceLocalizations = null;
        //List<String> include = null;
        //AppClipDefaultExperienceResponse response = api.appStoreVersionsAppClipDefaultExperienceGetToOneRelated(id, fieldsAppClips, fieldsAppClipAppStoreReviewDetails, fieldsAppStoreVersions, fieldsAppClipDefaultExperiences, fieldsAppClipDefaultExperienceLocalizations, limitAppClipDefaultExperienceLocalizations, include);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipTest() throws ApiException {
        //String id = null;
        //AppStoreVersionAppClipDefaultExperienceLinkageResponse response = api.appStoreVersionsAppClipDefaultExperienceGetToOneRelationship(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipTest() throws ApiException {
        //String id = null;
        //AppStoreVersionAppClipDefaultExperienceLinkageRequest appStoreVersionAppClipDefaultExperienceLinkageRequest = null;
        //api.appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship(id, appStoreVersionAppClipDefaultExperienceLinkageRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsAppStoreReviewDetailGetToOneRelatedTest() throws ApiException {
        //String id = null;
        //List<String> fieldsAppStoreReviewDetails = null;
        //List<String> fieldsAppStoreVersions = null;
        //List<String> fieldsAppStoreReviewAttachments = null;
        //Integer limitAppStoreReviewAttachments = null;
        //List<String> include = null;
        //AppStoreReviewDetailResponse response = api.appStoreVersionsAppStoreReviewDetailGetToOneRelated(id, fieldsAppStoreReviewDetails, fieldsAppStoreVersions, fieldsAppStoreReviewAttachments, limitAppStoreReviewAttachments, include);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedTest() throws ApiException {
        //String id = null;
        //List<String> filterState = null;
        //List<String> fieldsAppStoreVersionExperiments = null;
        //List<String> fieldsAppStoreVersionExperimentTreatments = null;
        //List<String> fieldsAppStoreVersions = null;
        //Integer limit = null;
        //Integer limitAppStoreVersionExperimentTreatments = null;
        //List<String> include = null;
        //AppStoreVersionExperimentsResponse response = api.appStoreVersionsAppStoreVersionExperimentsGetToManyRelated(id, filterState, fieldsAppStoreVersionExperiments, fieldsAppStoreVersionExperimentTreatments, fieldsAppStoreVersions, limit, limitAppStoreVersionExperimentTreatments, include);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedTest() throws ApiException {
        //String id = null;
        //List<String> filterState = null;
        //List<String> fieldsAppStoreVersionExperiments = null;
        //List<String> fieldsAppStoreVersionExperimentTreatments = null;
        //List<String> fieldsAppStoreVersions = null;
        //List<String> fieldsApps = null;
        //Integer limit = null;
        //Integer limitControlVersions = null;
        //Integer limitAppStoreVersionExperimentTreatments = null;
        //List<String> include = null;
        //AppStoreVersionExperimentsV2Response response = api.appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated(id, filterState, fieldsAppStoreVersionExperiments, fieldsAppStoreVersionExperimentTreatments, fieldsAppStoreVersions, fieldsApps, limit, limitControlVersions, limitAppStoreVersionExperimentTreatments, include);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedTest() throws ApiException {
        //String id = null;
        //List<String> filterLocale = null;
        //List<String> fieldsAppScreenshotSets = null;
        //List<String> fieldsAppStoreVersions = null;
        //List<String> fieldsAppPreviewSets = null;
        //List<String> fieldsAppStoreVersionLocalizations = null;
        //Integer limit = null;
        //Integer limitAppScreenshotSets = null;
        //Integer limitAppPreviewSets = null;
        //List<String> include = null;
        //AppStoreVersionLocalizationsResponse response = api.appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(id, filterLocale, fieldsAppScreenshotSets, fieldsAppStoreVersions, fieldsAppPreviewSets, fieldsAppStoreVersionLocalizations, limit, limitAppScreenshotSets, limitAppPreviewSets, include);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedTest() throws ApiException {
        //String id = null;
        //List<String> fieldsAppStoreVersionPhasedReleases = null;
        //AppStoreVersionPhasedReleaseWithoutIncludesResponse response = api.appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(id, fieldsAppStoreVersionPhasedReleases);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedTest() throws ApiException {
        //String id = null;
        //List<String> fieldsAppStoreVersionSubmissions = null;
        //List<String> fieldsAppStoreVersions = null;
        //List<String> include = null;
        //AppStoreVersionSubmissionResponse response = api.appStoreVersionsAppStoreVersionSubmissionGetToOneRelated(id, fieldsAppStoreVersionSubmissions, fieldsAppStoreVersions, include);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsBuildGetToOneRelatedTest() throws ApiException {
        //String id = null;
        //List<String> fieldsBuilds = null;
        //BuildWithoutIncludesResponse response = api.appStoreVersionsBuildGetToOneRelated(id, fieldsBuilds);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsBuildGetToOneRelationshipTest() throws ApiException {
        //String id = null;
        //AppStoreVersionBuildLinkageResponse response = api.appStoreVersionsBuildGetToOneRelationship(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsBuildUpdateToOneRelationshipTest() throws ApiException {
        //String id = null;
        //AppStoreVersionBuildLinkageRequest appStoreVersionBuildLinkageRequest = null;
        //api.appStoreVersionsBuildUpdateToOneRelationship(id, appStoreVersionBuildLinkageRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsCreateInstanceTest() throws ApiException {
        //AppStoreVersionCreateRequest appStoreVersionCreateRequest = null;
        //AppStoreVersionResponse response = api.appStoreVersionsCreateInstance(appStoreVersionCreateRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsCustomerReviewsGetToManyRelatedTest() throws ApiException {
        //String id = null;
        //List<String> filterRating = null;
        //List<String> filterTerritory = null;
        //Boolean existsPublishedResponse = null;
        //List<String> sort = null;
        //List<String> fieldsCustomerReviews = null;
        //List<String> fieldsCustomerReviewResponses = null;
        //Integer limit = null;
        //List<String> include = null;
        //CustomerReviewsResponse response = api.appStoreVersionsCustomerReviewsGetToManyRelated(id, filterRating, filterTerritory, existsPublishedResponse, sort, fieldsCustomerReviews, fieldsCustomerReviewResponses, limit, include);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsDeleteInstanceTest() throws ApiException {
        //String id = null;
        //api.appStoreVersionsDeleteInstance(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsGetInstanceTest() throws ApiException {
        //String id = null;
        //List<String> fieldsAppStoreVersions = null;
        //List<String> include = null;
        //List<String> fieldsAppStoreVersionExperiments = null;
        //List<String> fieldsAppStoreVersionSubmissions = null;
        //List<String> fieldsAgeRatingDeclarations = null;
        //List<String> fieldsAlternativeDistributionPackages = null;
        //List<String> fieldsCustomerReviews = null;
        //List<String> fieldsAppStoreReviewDetails = null;
        //List<String> fieldsAppClipDefaultExperiences = null;
        //List<String> fieldsRoutingAppCoverages = null;
        //List<String> fieldsAppStoreVersionPhasedReleases = null;
        //List<String> fieldsBuilds = null;
        //List<String> fieldsAppStoreVersionLocalizations = null;
        //Integer limitAppStoreVersionExperiments = null;
        //Integer limitAppStoreVersionExperimentsV2 = null;
        //Integer limitAppStoreVersionLocalizations = null;
        //AppStoreVersionResponse response = api.appStoreVersionsGetInstance(id, fieldsAppStoreVersions, include, fieldsAppStoreVersionExperiments, fieldsAppStoreVersionSubmissions, fieldsAgeRatingDeclarations, fieldsAlternativeDistributionPackages, fieldsCustomerReviews, fieldsAppStoreReviewDetails, fieldsAppClipDefaultExperiences, fieldsRoutingAppCoverages, fieldsAppStoreVersionPhasedReleases, fieldsBuilds, fieldsAppStoreVersionLocalizations, limitAppStoreVersionExperiments, limitAppStoreVersionExperimentsV2, limitAppStoreVersionLocalizations);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsRoutingAppCoverageGetToOneRelatedTest() throws ApiException {
        //String id = null;
        //List<String> fieldsRoutingAppCoverages = null;
        //RoutingAppCoverageWithoutIncludesResponse response = api.appStoreVersionsRoutingAppCoverageGetToOneRelated(id, fieldsRoutingAppCoverages);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsUpdateInstanceTest() throws ApiException {
        //String id = null;
        //AppStoreVersionUpdateRequest appStoreVersionUpdateRequest = null;
        //AppStoreVersionResponse response = api.appStoreVersionsUpdateInstance(id, appStoreVersionUpdateRequest);
        // TODO: test validations
    }

}
